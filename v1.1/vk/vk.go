// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 28 Aug 2018 21:43:25 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package vk

/*
#cgo CFLAGS: -I.
#include "vulkan/vulkan.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// CreateInstance function as declared in vulkan/vulkan_core.h:2899
func CreateInstance(PCreateInfo []InstanceCreateInfo, PAllocator []AllocationCallbacks, PInstance []Instance) Result {
	cPCreateInfo, _ := unpackArgSInstanceCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPInstance, _ := (*C.VkInstance)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PInstance)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateInstance(cPCreateInfo, cPAllocator, cPInstance)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSInstanceCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyInstance function as declared in vulkan/vulkan_core.h:2904
func DestroyInstance(Instance Instance, PAllocator []AllocationCallbacks) {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyInstance(cInstance, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// EnumeratePhysicalDevices function as declared in vulkan/vulkan_core.h:2908
func EnumeratePhysicalDevices(Instance Instance, PPhysicalDeviceCount []uint32, PPhysicalDevices []PhysicalDevice) Result {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cPPhysicalDeviceCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPhysicalDeviceCount)).Data)), cgoAllocsUnknown
	cPPhysicalDevices, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPhysicalDevices)).Data)), cgoAllocsUnknown
	__ret := C.vkEnumeratePhysicalDevices(cInstance, cPPhysicalDeviceCount, cPPhysicalDevices)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceFeatures function as declared in vulkan/vulkan_core.h:2913
func GetPhysicalDeviceFeatures(PhysicalDevice PhysicalDevice, PFeatures []PhysicalDeviceFeatures) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPFeatures, _ := unpackArgSPhysicalDeviceFeatures(PFeatures)
	C.vkGetPhysicalDeviceFeatures(cPhysicalDevice, cPFeatures)
	packSPhysicalDeviceFeatures(PFeatures, cPFeatures)
}

// GetPhysicalDeviceFormatProperties function as declared in vulkan/vulkan_core.h:2917
func GetPhysicalDeviceFormatProperties(PhysicalDevice PhysicalDevice, Format Format, PFormatProperties []FormatProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cFormat, _ := (C.VkFormat)(Format), cgoAllocsUnknown
	cPFormatProperties, _ := unpackArgSFormatProperties(PFormatProperties)
	C.vkGetPhysicalDeviceFormatProperties(cPhysicalDevice, cFormat, cPFormatProperties)
	packSFormatProperties(PFormatProperties, cPFormatProperties)
}

// GetPhysicalDeviceImageFormatProperties function as declared in vulkan/vulkan_core.h:2922
func GetPhysicalDeviceImageFormatProperties(PhysicalDevice PhysicalDevice, Format Format, _type ImageType, Tiling ImageTiling, Usage ImageUsageFlags, Flags ImageCreateFlags, PImageFormatProperties []ImageFormatProperties) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cFormat, _ := (C.VkFormat)(Format), cgoAllocsUnknown
	c_type, _ := (C.VkImageType)(_type), cgoAllocsUnknown
	cTiling, _ := (C.VkImageTiling)(Tiling), cgoAllocsUnknown
	cUsage, _ := (C.VkImageUsageFlags)(Usage), cgoAllocsUnknown
	cFlags, _ := (C.VkImageCreateFlags)(Flags), cgoAllocsUnknown
	cPImageFormatProperties, _ := unpackArgSImageFormatProperties(PImageFormatProperties)
	__ret := C.vkGetPhysicalDeviceImageFormatProperties(cPhysicalDevice, cFormat, c_type, cTiling, cUsage, cFlags, cPImageFormatProperties)
	packSImageFormatProperties(PImageFormatProperties, cPImageFormatProperties)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceProperties function as declared in vulkan/vulkan_core.h:2931
func GetPhysicalDeviceProperties(PhysicalDevice PhysicalDevice, PProperties []PhysicalDeviceProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSPhysicalDeviceProperties(PProperties)
	C.vkGetPhysicalDeviceProperties(cPhysicalDevice, cPProperties)
	packSPhysicalDeviceProperties(PProperties, cPProperties)
}

// GetPhysicalDeviceQueueFamilyProperties function as declared in vulkan/vulkan_core.h:2935
func GetPhysicalDeviceQueueFamilyProperties(PhysicalDevice PhysicalDevice, PQueueFamilyPropertyCount []uint32, PQueueFamilyProperties []QueueFamilyProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPQueueFamilyPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PQueueFamilyPropertyCount)).Data)), cgoAllocsUnknown
	cPQueueFamilyProperties, _ := unpackArgSQueueFamilyProperties(PQueueFamilyProperties)
	C.vkGetPhysicalDeviceQueueFamilyProperties(cPhysicalDevice, cPQueueFamilyPropertyCount, cPQueueFamilyProperties)
	packSQueueFamilyProperties(PQueueFamilyProperties, cPQueueFamilyProperties)
}

// GetPhysicalDeviceMemoryProperties function as declared in vulkan/vulkan_core.h:2940
func GetPhysicalDeviceMemoryProperties(PhysicalDevice PhysicalDevice, PMemoryProperties []PhysicalDeviceMemoryProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPMemoryProperties, _ := unpackArgSPhysicalDeviceMemoryProperties(PMemoryProperties)
	C.vkGetPhysicalDeviceMemoryProperties(cPhysicalDevice, cPMemoryProperties)
	packSPhysicalDeviceMemoryProperties(PMemoryProperties, cPMemoryProperties)
}

// CreateDevice function as declared in vulkan/vulkan_core.h:2952
func CreateDevice(PhysicalDevice PhysicalDevice, PCreateInfo []DeviceCreateInfo, PAllocator []AllocationCallbacks, PDevice []Device) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDeviceCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDevice)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateDevice(cPhysicalDevice, cPCreateInfo, cPAllocator, cPDevice)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDeviceCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDevice function as declared in vulkan/vulkan_core.h:2958
func DestroyDevice(Device Device, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDevice(cDevice, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// EnumerateInstanceExtensionProperties function as declared in vulkan/vulkan_core.h:2962
func EnumerateInstanceExtensionProperties(PLayerName string, PPropertyCount []uint32, PProperties []ExtensionProperties) Result {
	cPLayerName, _ := unpackPCharString(PLayerName)
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSExtensionProperties(PProperties)
	__ret := C.vkEnumerateInstanceExtensionProperties(cPLayerName, cPPropertyCount, cPProperties)
	packSExtensionProperties(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// EnumerateDeviceExtensionProperties function as declared in vulkan/vulkan_core.h:2967
func EnumerateDeviceExtensionProperties(PhysicalDevice PhysicalDevice, PLayerName string, PPropertyCount []uint32, PProperties []ExtensionProperties) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPLayerName, _ := unpackPCharString(PLayerName)
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSExtensionProperties(PProperties)
	__ret := C.vkEnumerateDeviceExtensionProperties(cPhysicalDevice, cPLayerName, cPPropertyCount, cPProperties)
	packSExtensionProperties(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// EnumerateInstanceLayerProperties function as declared in vulkan/vulkan_core.h:2973
func EnumerateInstanceLayerProperties(PPropertyCount []uint32, PProperties []LayerProperties) Result {
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSLayerProperties(PProperties)
	__ret := C.vkEnumerateInstanceLayerProperties(cPPropertyCount, cPProperties)
	packSLayerProperties(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// EnumerateDeviceLayerProperties function as declared in vulkan/vulkan_core.h:2977
func EnumerateDeviceLayerProperties(PhysicalDevice PhysicalDevice, PPropertyCount []uint32, PProperties []LayerProperties) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSLayerProperties(PProperties)
	__ret := C.vkEnumerateDeviceLayerProperties(cPhysicalDevice, cPPropertyCount, cPProperties)
	packSLayerProperties(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// GetDeviceQueue function as declared in vulkan/vulkan_core.h:2982
func GetDeviceQueue(Device Device, QueueFamilyIndex uint32, QueueIndex uint32, PQueue []Queue) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cQueueFamilyIndex, _ := (C.uint32_t)(QueueFamilyIndex), cgoAllocsUnknown
	cQueueIndex, _ := (C.uint32_t)(QueueIndex), cgoAllocsUnknown
	cPQueue, _ := (*C.VkQueue)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PQueue)).Data)), cgoAllocsUnknown
	C.vkGetDeviceQueue(cDevice, cQueueFamilyIndex, cQueueIndex, cPQueue)
}

// QueueSubmit function as declared in vulkan/vulkan_core.h:2988
func QueueSubmit(Queue Queue, SubmitCount uint32, PSubmits []SubmitInfo, Fence Fence) Result {
	cQueue, _ := *(*C.VkQueue)(unsafe.Pointer(&Queue)), cgoAllocsUnknown
	cSubmitCount, _ := (C.uint32_t)(SubmitCount), cgoAllocsUnknown
	cPSubmits, _ := unpackArgSSubmitInfo(PSubmits)
	cFence, _ := *(*C.VkFence)(unsafe.Pointer(&Fence)), cgoAllocsUnknown
	__ret := C.vkQueueSubmit(cQueue, cSubmitCount, cPSubmits, cFence)
	packSSubmitInfo(PSubmits, cPSubmits)
	__v := (Result)(__ret)
	return __v
}

// QueueWaitIdle function as declared in vulkan/vulkan_core.h:2994
func QueueWaitIdle(Queue Queue) Result {
	cQueue, _ := *(*C.VkQueue)(unsafe.Pointer(&Queue)), cgoAllocsUnknown
	__ret := C.vkQueueWaitIdle(cQueue)
	__v := (Result)(__ret)
	return __v
}

// DeviceWaitIdle function as declared in vulkan/vulkan_core.h:2997
func DeviceWaitIdle(Device Device) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	__ret := C.vkDeviceWaitIdle(cDevice)
	__v := (Result)(__ret)
	return __v
}

// AllocateMemory function as declared in vulkan/vulkan_core.h:3000
func AllocateMemory(Device Device, PAllocateInfo []MemoryAllocateInfo, PAllocator []AllocationCallbacks, PMemory []DeviceMemory) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPAllocateInfo, _ := unpackArgSMemoryAllocateInfo(PAllocateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPMemory, _ := (*C.VkDeviceMemory)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PMemory)).Data)), cgoAllocsUnknown
	__ret := C.vkAllocateMemory(cDevice, cPAllocateInfo, cPAllocator, cPMemory)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSMemoryAllocateInfo(PAllocateInfo, cPAllocateInfo)
	__v := (Result)(__ret)
	return __v
}

// FreeMemory function as declared in vulkan/vulkan_core.h:3006
func FreeMemory(Device Device, Memory DeviceMemory, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMemory, _ := *(*C.VkDeviceMemory)(unsafe.Pointer(&Memory)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkFreeMemory(cDevice, cMemory, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// MapMemory function as declared in vulkan/vulkan_core.h:3011
func MapMemory(Device Device, Memory DeviceMemory, Offset DeviceSize, Size DeviceSize, Flags MemoryMapFlags, PpData []unsafe.Pointer) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMemory, _ := *(*C.VkDeviceMemory)(unsafe.Pointer(&Memory)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cSize, _ := (C.VkDeviceSize)(Size), cgoAllocsUnknown
	cFlags, _ := (C.VkMemoryMapFlags)(Flags), cgoAllocsUnknown
	cPpData, _ := (*unsafe.Pointer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PpData)).Data)), cgoAllocsUnknown
	__ret := C.vkMapMemory(cDevice, cMemory, cOffset, cSize, cFlags, cPpData)
	__v := (Result)(__ret)
	return __v
}

// UnmapMemory function as declared in vulkan/vulkan_core.h:3019
func UnmapMemory(Device Device, Memory DeviceMemory) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMemory, _ := *(*C.VkDeviceMemory)(unsafe.Pointer(&Memory)), cgoAllocsUnknown
	C.vkUnmapMemory(cDevice, cMemory)
}

// FlushMappedMemoryRanges function as declared in vulkan/vulkan_core.h:3023
func FlushMappedMemoryRanges(Device Device, MemoryRangeCount uint32, PMemoryRanges []MappedMemoryRange) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMemoryRangeCount, _ := (C.uint32_t)(MemoryRangeCount), cgoAllocsUnknown
	cPMemoryRanges, _ := unpackArgSMappedMemoryRange(PMemoryRanges)
	__ret := C.vkFlushMappedMemoryRanges(cDevice, cMemoryRangeCount, cPMemoryRanges)
	packSMappedMemoryRange(PMemoryRanges, cPMemoryRanges)
	__v := (Result)(__ret)
	return __v
}

// InvalidateMappedMemoryRanges function as declared in vulkan/vulkan_core.h:3028
func InvalidateMappedMemoryRanges(Device Device, MemoryRangeCount uint32, PMemoryRanges []MappedMemoryRange) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMemoryRangeCount, _ := (C.uint32_t)(MemoryRangeCount), cgoAllocsUnknown
	cPMemoryRanges, _ := unpackArgSMappedMemoryRange(PMemoryRanges)
	__ret := C.vkInvalidateMappedMemoryRanges(cDevice, cMemoryRangeCount, cPMemoryRanges)
	packSMappedMemoryRange(PMemoryRanges, cPMemoryRanges)
	__v := (Result)(__ret)
	return __v
}

// GetDeviceMemoryCommitment function as declared in vulkan/vulkan_core.h:3033
func GetDeviceMemoryCommitment(Device Device, Memory DeviceMemory, PCommittedMemoryInBytes []DeviceSize) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMemory, _ := *(*C.VkDeviceMemory)(unsafe.Pointer(&Memory)), cgoAllocsUnknown
	cPCommittedMemoryInBytes, _ := (*C.VkDeviceSize)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PCommittedMemoryInBytes)).Data)), cgoAllocsUnknown
	C.vkGetDeviceMemoryCommitment(cDevice, cMemory, cPCommittedMemoryInBytes)
}

// BindBufferMemory function as declared in vulkan/vulkan_core.h:3038
func BindBufferMemory(Device Device, Buffer Buffer, Memory DeviceMemory, MemoryOffset DeviceSize) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cMemory, _ := *(*C.VkDeviceMemory)(unsafe.Pointer(&Memory)), cgoAllocsUnknown
	cMemoryOffset, _ := (C.VkDeviceSize)(MemoryOffset), cgoAllocsUnknown
	__ret := C.vkBindBufferMemory(cDevice, cBuffer, cMemory, cMemoryOffset)
	__v := (Result)(__ret)
	return __v
}

// BindImageMemory function as declared in vulkan/vulkan_core.h:3044
func BindImageMemory(Device Device, Image Image, Memory DeviceMemory, MemoryOffset DeviceSize) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cImage, _ := *(*C.VkImage)(unsafe.Pointer(&Image)), cgoAllocsUnknown
	cMemory, _ := *(*C.VkDeviceMemory)(unsafe.Pointer(&Memory)), cgoAllocsUnknown
	cMemoryOffset, _ := (C.VkDeviceSize)(MemoryOffset), cgoAllocsUnknown
	__ret := C.vkBindImageMemory(cDevice, cImage, cMemory, cMemoryOffset)
	__v := (Result)(__ret)
	return __v
}

// GetBufferMemoryRequirements function as declared in vulkan/vulkan_core.h:3050
func GetBufferMemoryRequirements(Device Device, Buffer Buffer, PMemoryRequirements []MemoryRequirements) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cPMemoryRequirements, _ := unpackArgSMemoryRequirements(PMemoryRequirements)
	C.vkGetBufferMemoryRequirements(cDevice, cBuffer, cPMemoryRequirements)
	packSMemoryRequirements(PMemoryRequirements, cPMemoryRequirements)
}

// GetImageMemoryRequirements function as declared in vulkan/vulkan_core.h:3055
func GetImageMemoryRequirements(Device Device, Image Image, PMemoryRequirements []MemoryRequirements) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cImage, _ := *(*C.VkImage)(unsafe.Pointer(&Image)), cgoAllocsUnknown
	cPMemoryRequirements, _ := unpackArgSMemoryRequirements(PMemoryRequirements)
	C.vkGetImageMemoryRequirements(cDevice, cImage, cPMemoryRequirements)
	packSMemoryRequirements(PMemoryRequirements, cPMemoryRequirements)
}

// GetImageSparseMemoryRequirements function as declared in vulkan/vulkan_core.h:3060
func GetImageSparseMemoryRequirements(Device Device, Image Image, PSparseMemoryRequirementCount []uint32, PSparseMemoryRequirements []SparseImageMemoryRequirements) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cImage, _ := *(*C.VkImage)(unsafe.Pointer(&Image)), cgoAllocsUnknown
	cPSparseMemoryRequirementCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSparseMemoryRequirementCount)).Data)), cgoAllocsUnknown
	cPSparseMemoryRequirements, _ := unpackArgSSparseImageMemoryRequirements(PSparseMemoryRequirements)
	C.vkGetImageSparseMemoryRequirements(cDevice, cImage, cPSparseMemoryRequirementCount, cPSparseMemoryRequirements)
	packSSparseImageMemoryRequirements(PSparseMemoryRequirements, cPSparseMemoryRequirements)
}

// GetPhysicalDeviceSparseImageFormatProperties function as declared in vulkan/vulkan_core.h:3066
func GetPhysicalDeviceSparseImageFormatProperties(PhysicalDevice PhysicalDevice, Format Format, _type ImageType, Samples SampleCountFlagBits, Usage ImageUsageFlags, Tiling ImageTiling, PPropertyCount []uint32, PProperties []SparseImageFormatProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cFormat, _ := (C.VkFormat)(Format), cgoAllocsUnknown
	c_type, _ := (C.VkImageType)(_type), cgoAllocsUnknown
	cSamples, _ := (C.VkSampleCountFlagBits)(Samples), cgoAllocsUnknown
	cUsage, _ := (C.VkImageUsageFlags)(Usage), cgoAllocsUnknown
	cTiling, _ := (C.VkImageTiling)(Tiling), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSSparseImageFormatProperties(PProperties)
	C.vkGetPhysicalDeviceSparseImageFormatProperties(cPhysicalDevice, cFormat, c_type, cSamples, cUsage, cTiling, cPPropertyCount, cPProperties)
	packSSparseImageFormatProperties(PProperties, cPProperties)
}

// QueueBindSparse function as declared in vulkan/vulkan_core.h:3076
func QueueBindSparse(Queue Queue, BindInfoCount uint32, PBindInfo []BindSparseInfo, Fence Fence) Result {
	cQueue, _ := *(*C.VkQueue)(unsafe.Pointer(&Queue)), cgoAllocsUnknown
	cBindInfoCount, _ := (C.uint32_t)(BindInfoCount), cgoAllocsUnknown
	cPBindInfo, _ := unpackArgSBindSparseInfo(PBindInfo)
	cFence, _ := *(*C.VkFence)(unsafe.Pointer(&Fence)), cgoAllocsUnknown
	__ret := C.vkQueueBindSparse(cQueue, cBindInfoCount, cPBindInfo, cFence)
	packSBindSparseInfo(PBindInfo, cPBindInfo)
	__v := (Result)(__ret)
	return __v
}

// CreateFence function as declared in vulkan/vulkan_core.h:3082
func CreateFence(Device Device, PCreateInfo []FenceCreateInfo, PAllocator []AllocationCallbacks, PFence []Fence) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSFenceCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPFence, _ := (*C.VkFence)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PFence)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateFence(cDevice, cPCreateInfo, cPAllocator, cPFence)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSFenceCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyFence function as declared in vulkan/vulkan_core.h:3088
func DestroyFence(Device Device, Fence Fence, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cFence, _ := *(*C.VkFence)(unsafe.Pointer(&Fence)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyFence(cDevice, cFence, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// ResetFences function as declared in vulkan/vulkan_core.h:3093
func ResetFences(Device Device, FenceCount uint32, PFences []Fence) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cFenceCount, _ := (C.uint32_t)(FenceCount), cgoAllocsUnknown
	cPFences, _ := (*C.VkFence)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PFences)).Data)), cgoAllocsUnknown
	__ret := C.vkResetFences(cDevice, cFenceCount, cPFences)
	__v := (Result)(__ret)
	return __v
}

// GetFenceStatus function as declared in vulkan/vulkan_core.h:3098
func GetFenceStatus(Device Device, Fence Fence) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cFence, _ := *(*C.VkFence)(unsafe.Pointer(&Fence)), cgoAllocsUnknown
	__ret := C.vkGetFenceStatus(cDevice, cFence)
	__v := (Result)(__ret)
	return __v
}

// WaitForFences function as declared in vulkan/vulkan_core.h:3102
func WaitForFences(Device Device, FenceCount uint32, PFences []Fence, WaitAll Bool32, Timeout uint64) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cFenceCount, _ := (C.uint32_t)(FenceCount), cgoAllocsUnknown
	cPFences, _ := (*C.VkFence)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PFences)).Data)), cgoAllocsUnknown
	cWaitAll, _ := (C.VkBool32)(WaitAll), cgoAllocsUnknown
	cTimeout, _ := (C.uint64_t)(Timeout), cgoAllocsUnknown
	__ret := C.vkWaitForFences(cDevice, cFenceCount, cPFences, cWaitAll, cTimeout)
	__v := (Result)(__ret)
	return __v
}

// CreateSemaphore function as declared in vulkan/vulkan_core.h:3109
func CreateSemaphore(Device Device, PCreateInfo []SemaphoreCreateInfo, PAllocator []AllocationCallbacks, PSemaphore []Semaphore) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSSemaphoreCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSemaphore, _ := (*C.VkSemaphore)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSemaphore)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateSemaphore(cDevice, cPCreateInfo, cPAllocator, cPSemaphore)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSSemaphoreCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroySemaphore function as declared in vulkan/vulkan_core.h:3115
func DestroySemaphore(Device Device, Semaphore Semaphore, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSemaphore, _ := *(*C.VkSemaphore)(unsafe.Pointer(&Semaphore)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroySemaphore(cDevice, cSemaphore, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateEvent function as declared in vulkan/vulkan_core.h:3120
func CreateEvent(Device Device, PCreateInfo []EventCreateInfo, PAllocator []AllocationCallbacks, PEvent []Event) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSEventCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPEvent, _ := (*C.VkEvent)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PEvent)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateEvent(cDevice, cPCreateInfo, cPAllocator, cPEvent)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSEventCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyEvent function as declared in vulkan/vulkan_core.h:3126
func DestroyEvent(Device Device, Event Event, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cEvent, _ := *(*C.VkEvent)(unsafe.Pointer(&Event)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyEvent(cDevice, cEvent, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetEventStatus function as declared in vulkan/vulkan_core.h:3131
func GetEventStatus(Device Device, Event Event) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cEvent, _ := *(*C.VkEvent)(unsafe.Pointer(&Event)), cgoAllocsUnknown
	__ret := C.vkGetEventStatus(cDevice, cEvent)
	__v := (Result)(__ret)
	return __v
}

// SetEvent function as declared in vulkan/vulkan_core.h:3135
func SetEvent(Device Device, Event Event) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cEvent, _ := *(*C.VkEvent)(unsafe.Pointer(&Event)), cgoAllocsUnknown
	__ret := C.vkSetEvent(cDevice, cEvent)
	__v := (Result)(__ret)
	return __v
}

// ResetEvent function as declared in vulkan/vulkan_core.h:3139
func ResetEvent(Device Device, Event Event) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cEvent, _ := *(*C.VkEvent)(unsafe.Pointer(&Event)), cgoAllocsUnknown
	__ret := C.vkResetEvent(cDevice, cEvent)
	__v := (Result)(__ret)
	return __v
}

// CreateQueryPool function as declared in vulkan/vulkan_core.h:3143
func CreateQueryPool(Device Device, PCreateInfo []QueryPoolCreateInfo, PAllocator []AllocationCallbacks, PQueryPool []QueryPool) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSQueryPoolCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPQueryPool, _ := (*C.VkQueryPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PQueryPool)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateQueryPool(cDevice, cPCreateInfo, cPAllocator, cPQueryPool)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSQueryPoolCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyQueryPool function as declared in vulkan/vulkan_core.h:3149
func DestroyQueryPool(Device Device, QueryPool QueryPool, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cQueryPool, _ := *(*C.VkQueryPool)(unsafe.Pointer(&QueryPool)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyQueryPool(cDevice, cQueryPool, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetQueryPoolResults function as declared in vulkan/vulkan_core.h:3154
func GetQueryPoolResults(Device Device, QueryPool QueryPool, FirstQuery uint32, QueryCount uint32, DataSize uint, PData unsafe.Pointer, Stride DeviceSize, Flags QueryResultFlags) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cQueryPool, _ := *(*C.VkQueryPool)(unsafe.Pointer(&QueryPool)), cgoAllocsUnknown
	cFirstQuery, _ := (C.uint32_t)(FirstQuery), cgoAllocsUnknown
	cQueryCount, _ := (C.uint32_t)(QueryCount), cgoAllocsUnknown
	cDataSize, _ := (C.size_t)(DataSize), cgoAllocsUnknown
	cPData, _ := PData, cgoAllocsUnknown
	cStride, _ := (C.VkDeviceSize)(Stride), cgoAllocsUnknown
	cFlags, _ := (C.VkQueryResultFlags)(Flags), cgoAllocsUnknown
	__ret := C.vkGetQueryPoolResults(cDevice, cQueryPool, cFirstQuery, cQueryCount, cDataSize, cPData, cStride, cFlags)
	__v := (Result)(__ret)
	return __v
}

// CreateBuffer function as declared in vulkan/vulkan_core.h:3164
func CreateBuffer(Device Device, PCreateInfo []BufferCreateInfo, PAllocator []AllocationCallbacks, PBuffer []Buffer) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSBufferCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PBuffer)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateBuffer(cDevice, cPCreateInfo, cPAllocator, cPBuffer)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSBufferCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyBuffer function as declared in vulkan/vulkan_core.h:3170
func DestroyBuffer(Device Device, Buffer Buffer, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyBuffer(cDevice, cBuffer, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateBufferView function as declared in vulkan/vulkan_core.h:3175
func CreateBufferView(Device Device, PCreateInfo []BufferViewCreateInfo, PAllocator []AllocationCallbacks, PView []BufferView) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSBufferViewCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPView, _ := (*C.VkBufferView)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PView)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateBufferView(cDevice, cPCreateInfo, cPAllocator, cPView)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSBufferViewCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyBufferView function as declared in vulkan/vulkan_core.h:3181
func DestroyBufferView(Device Device, BufferView BufferView, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cBufferView, _ := *(*C.VkBufferView)(unsafe.Pointer(&BufferView)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyBufferView(cDevice, cBufferView, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateImage function as declared in vulkan/vulkan_core.h:3186
func CreateImage(Device Device, PCreateInfo []ImageCreateInfo, PAllocator []AllocationCallbacks, PImage []Image) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSImageCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PImage)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateImage(cDevice, cPCreateInfo, cPAllocator, cPImage)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSImageCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyImage function as declared in vulkan/vulkan_core.h:3192
func DestroyImage(Device Device, Image Image, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cImage, _ := *(*C.VkImage)(unsafe.Pointer(&Image)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyImage(cDevice, cImage, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetImageSubresourceLayout function as declared in vulkan/vulkan_core.h:3197
func GetImageSubresourceLayout(Device Device, Image Image, PSubresource []ImageSubresource, PLayout []SubresourceLayout) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cImage, _ := *(*C.VkImage)(unsafe.Pointer(&Image)), cgoAllocsUnknown
	cPSubresource, _ := unpackArgSImageSubresource(PSubresource)
	cPLayout, _ := unpackArgSSubresourceLayout(PLayout)
	C.vkGetImageSubresourceLayout(cDevice, cImage, cPSubresource, cPLayout)
	packSSubresourceLayout(PLayout, cPLayout)
	packSImageSubresource(PSubresource, cPSubresource)
}

// CreateImageView function as declared in vulkan/vulkan_core.h:3203
func CreateImageView(Device Device, PCreateInfo []ImageViewCreateInfo, PAllocator []AllocationCallbacks, PView []ImageView) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSImageViewCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPView, _ := (*C.VkImageView)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PView)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateImageView(cDevice, cPCreateInfo, cPAllocator, cPView)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSImageViewCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyImageView function as declared in vulkan/vulkan_core.h:3209
func DestroyImageView(Device Device, ImageView ImageView, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cImageView, _ := *(*C.VkImageView)(unsafe.Pointer(&ImageView)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyImageView(cDevice, cImageView, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateShaderModule function as declared in vulkan/vulkan_core.h:3214
func CreateShaderModule(Device Device, PCreateInfo []ShaderModuleCreateInfo, PAllocator []AllocationCallbacks, PShaderModule []ShaderModule) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSShaderModuleCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPShaderModule, _ := (*C.VkShaderModule)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PShaderModule)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateShaderModule(cDevice, cPCreateInfo, cPAllocator, cPShaderModule)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSShaderModuleCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyShaderModule function as declared in vulkan/vulkan_core.h:3220
func DestroyShaderModule(Device Device, ShaderModule ShaderModule, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cShaderModule, _ := *(*C.VkShaderModule)(unsafe.Pointer(&ShaderModule)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyShaderModule(cDevice, cShaderModule, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreatePipelineCache function as declared in vulkan/vulkan_core.h:3225
func CreatePipelineCache(Device Device, PCreateInfo []PipelineCacheCreateInfo, PAllocator []AllocationCallbacks, PPipelineCache []PipelineCache) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSPipelineCacheCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPPipelineCache, _ := (*C.VkPipelineCache)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPipelineCache)).Data)), cgoAllocsUnknown
	__ret := C.vkCreatePipelineCache(cDevice, cPCreateInfo, cPAllocator, cPPipelineCache)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSPipelineCacheCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipelineCache function as declared in vulkan/vulkan_core.h:3231
func DestroyPipelineCache(Device Device, PipelineCache PipelineCache, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPipelineCache, _ := *(*C.VkPipelineCache)(unsafe.Pointer(&PipelineCache)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyPipelineCache(cDevice, cPipelineCache, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetPipelineCacheData function as declared in vulkan/vulkan_core.h:3236
func GetPipelineCacheData(Device Device, PipelineCache PipelineCache, PDataSize []uint, PData unsafe.Pointer) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPipelineCache, _ := *(*C.VkPipelineCache)(unsafe.Pointer(&PipelineCache)), cgoAllocsUnknown
	cPDataSize, _ := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDataSize)).Data)), cgoAllocsUnknown
	cPData, _ := PData, cgoAllocsUnknown
	__ret := C.vkGetPipelineCacheData(cDevice, cPipelineCache, cPDataSize, cPData)
	__v := (Result)(__ret)
	return __v
}

// MergePipelineCaches function as declared in vulkan/vulkan_core.h:3242
func MergePipelineCaches(Device Device, DstCache PipelineCache, SrcCacheCount uint32, PSrcCaches []PipelineCache) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDstCache, _ := *(*C.VkPipelineCache)(unsafe.Pointer(&DstCache)), cgoAllocsUnknown
	cSrcCacheCount, _ := (C.uint32_t)(SrcCacheCount), cgoAllocsUnknown
	cPSrcCaches, _ := (*C.VkPipelineCache)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSrcCaches)).Data)), cgoAllocsUnknown
	__ret := C.vkMergePipelineCaches(cDevice, cDstCache, cSrcCacheCount, cPSrcCaches)
	__v := (Result)(__ret)
	return __v
}

// CreateGraphicsPipelines function as declared in vulkan/vulkan_core.h:3248
func CreateGraphicsPipelines(Device Device, PipelineCache PipelineCache, CreateInfoCount uint32, PCreateInfos []GraphicsPipelineCreateInfo, PAllocator []AllocationCallbacks, PPipelines []Pipeline) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPipelineCache, _ := *(*C.VkPipelineCache)(unsafe.Pointer(&PipelineCache)), cgoAllocsUnknown
	cCreateInfoCount, _ := (C.uint32_t)(CreateInfoCount), cgoAllocsUnknown
	cPCreateInfos, _ := unpackArgSGraphicsPipelineCreateInfo(PCreateInfos)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPPipelines, _ := (*C.VkPipeline)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPipelines)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateGraphicsPipelines(cDevice, cPipelineCache, cCreateInfoCount, cPCreateInfos, cPAllocator, cPPipelines)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSGraphicsPipelineCreateInfo(PCreateInfos, cPCreateInfos)
	__v := (Result)(__ret)
	return __v
}

// CreateComputePipelines function as declared in vulkan/vulkan_core.h:3256
func CreateComputePipelines(Device Device, PipelineCache PipelineCache, CreateInfoCount uint32, PCreateInfos []ComputePipelineCreateInfo, PAllocator []AllocationCallbacks, PPipelines []Pipeline) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPipelineCache, _ := *(*C.VkPipelineCache)(unsafe.Pointer(&PipelineCache)), cgoAllocsUnknown
	cCreateInfoCount, _ := (C.uint32_t)(CreateInfoCount), cgoAllocsUnknown
	cPCreateInfos, _ := unpackArgSComputePipelineCreateInfo(PCreateInfos)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPPipelines, _ := (*C.VkPipeline)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPipelines)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateComputePipelines(cDevice, cPipelineCache, cCreateInfoCount, cPCreateInfos, cPAllocator, cPPipelines)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSComputePipelineCreateInfo(PCreateInfos, cPCreateInfos)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipeline function as declared in vulkan/vulkan_core.h:3264
func DestroyPipeline(Device Device, Pipeline Pipeline, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPipeline, _ := *(*C.VkPipeline)(unsafe.Pointer(&Pipeline)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyPipeline(cDevice, cPipeline, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreatePipelineLayout function as declared in vulkan/vulkan_core.h:3269
func CreatePipelineLayout(Device Device, PCreateInfo []PipelineLayoutCreateInfo, PAllocator []AllocationCallbacks, PPipelineLayout []PipelineLayout) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSPipelineLayoutCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPPipelineLayout, _ := (*C.VkPipelineLayout)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPipelineLayout)).Data)), cgoAllocsUnknown
	__ret := C.vkCreatePipelineLayout(cDevice, cPCreateInfo, cPAllocator, cPPipelineLayout)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSPipelineLayoutCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipelineLayout function as declared in vulkan/vulkan_core.h:3275
func DestroyPipelineLayout(Device Device, PipelineLayout PipelineLayout, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPipelineLayout, _ := *(*C.VkPipelineLayout)(unsafe.Pointer(&PipelineLayout)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyPipelineLayout(cDevice, cPipelineLayout, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateSampler function as declared in vulkan/vulkan_core.h:3280
func CreateSampler(Device Device, PCreateInfo []SamplerCreateInfo, PAllocator []AllocationCallbacks, PSampler []Sampler) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSSamplerCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSampler, _ := (*C.VkSampler)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSampler)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateSampler(cDevice, cPCreateInfo, cPAllocator, cPSampler)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSSamplerCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroySampler function as declared in vulkan/vulkan_core.h:3286
func DestroySampler(Device Device, Sampler Sampler, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSampler, _ := *(*C.VkSampler)(unsafe.Pointer(&Sampler)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroySampler(cDevice, cSampler, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateDescriptorSetLayout function as declared in vulkan/vulkan_core.h:3291
func CreateDescriptorSetLayout(Device Device, PCreateInfo []DescriptorSetLayoutCreateInfo, PAllocator []AllocationCallbacks, PSetLayout []DescriptorSetLayout) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDescriptorSetLayoutCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSetLayout, _ := (*C.VkDescriptorSetLayout)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSetLayout)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateDescriptorSetLayout(cDevice, cPCreateInfo, cPAllocator, cPSetLayout)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDescriptorSetLayoutCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDescriptorSetLayout function as declared in vulkan/vulkan_core.h:3297
func DestroyDescriptorSetLayout(Device Device, DescriptorSetLayout DescriptorSetLayout, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDescriptorSetLayout, _ := *(*C.VkDescriptorSetLayout)(unsafe.Pointer(&DescriptorSetLayout)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDescriptorSetLayout(cDevice, cDescriptorSetLayout, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateDescriptorPool function as declared in vulkan/vulkan_core.h:3302
func CreateDescriptorPool(Device Device, PCreateInfo []DescriptorPoolCreateInfo, PAllocator []AllocationCallbacks, PDescriptorPool []DescriptorPool) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDescriptorPoolCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPDescriptorPool, _ := (*C.VkDescriptorPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDescriptorPool)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateDescriptorPool(cDevice, cPCreateInfo, cPAllocator, cPDescriptorPool)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDescriptorPoolCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDescriptorPool function as declared in vulkan/vulkan_core.h:3308
func DestroyDescriptorPool(Device Device, DescriptorPool DescriptorPool, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDescriptorPool, _ := *(*C.VkDescriptorPool)(unsafe.Pointer(&DescriptorPool)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDescriptorPool(cDevice, cDescriptorPool, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// ResetDescriptorPool function as declared in vulkan/vulkan_core.h:3313
func ResetDescriptorPool(Device Device, DescriptorPool DescriptorPool, Flags DescriptorPoolResetFlags) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDescriptorPool, _ := *(*C.VkDescriptorPool)(unsafe.Pointer(&DescriptorPool)), cgoAllocsUnknown
	cFlags, _ := (C.VkDescriptorPoolResetFlags)(Flags), cgoAllocsUnknown
	__ret := C.vkResetDescriptorPool(cDevice, cDescriptorPool, cFlags)
	__v := (Result)(__ret)
	return __v
}

// AllocateDescriptorSets function as declared in vulkan/vulkan_core.h:3318
func AllocateDescriptorSets(Device Device, PAllocateInfo []DescriptorSetAllocateInfo, PDescriptorSets []DescriptorSet) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPAllocateInfo, _ := unpackArgSDescriptorSetAllocateInfo(PAllocateInfo)
	cPDescriptorSets, _ := (*C.VkDescriptorSet)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDescriptorSets)).Data)), cgoAllocsUnknown
	__ret := C.vkAllocateDescriptorSets(cDevice, cPAllocateInfo, cPDescriptorSets)
	packSDescriptorSetAllocateInfo(PAllocateInfo, cPAllocateInfo)
	__v := (Result)(__ret)
	return __v
}

// FreeDescriptorSets function as declared in vulkan/vulkan_core.h:3323
func FreeDescriptorSets(Device Device, DescriptorPool DescriptorPool, DescriptorSetCount uint32, PDescriptorSets []DescriptorSet) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDescriptorPool, _ := *(*C.VkDescriptorPool)(unsafe.Pointer(&DescriptorPool)), cgoAllocsUnknown
	cDescriptorSetCount, _ := (C.uint32_t)(DescriptorSetCount), cgoAllocsUnknown
	cPDescriptorSets, _ := (*C.VkDescriptorSet)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDescriptorSets)).Data)), cgoAllocsUnknown
	__ret := C.vkFreeDescriptorSets(cDevice, cDescriptorPool, cDescriptorSetCount, cPDescriptorSets)
	__v := (Result)(__ret)
	return __v
}

// UpdateDescriptorSets function as declared in vulkan/vulkan_core.h:3329
func UpdateDescriptorSets(Device Device, DescriptorWriteCount uint32, PDescriptorWrites []WriteDescriptorSet, DescriptorCopyCount uint32, PDescriptorCopies []CopyDescriptorSet) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDescriptorWriteCount, _ := (C.uint32_t)(DescriptorWriteCount), cgoAllocsUnknown
	cPDescriptorWrites, _ := unpackArgSWriteDescriptorSet(PDescriptorWrites)
	cDescriptorCopyCount, _ := (C.uint32_t)(DescriptorCopyCount), cgoAllocsUnknown
	cPDescriptorCopies, _ := unpackArgSCopyDescriptorSet(PDescriptorCopies)
	C.vkUpdateDescriptorSets(cDevice, cDescriptorWriteCount, cPDescriptorWrites, cDescriptorCopyCount, cPDescriptorCopies)
	packSCopyDescriptorSet(PDescriptorCopies, cPDescriptorCopies)
	packSWriteDescriptorSet(PDescriptorWrites, cPDescriptorWrites)
}

// CreateFramebuffer function as declared in vulkan/vulkan_core.h:3336
func CreateFramebuffer(Device Device, PCreateInfo []FramebufferCreateInfo, PAllocator []AllocationCallbacks, PFramebuffer []Framebuffer) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSFramebufferCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPFramebuffer, _ := (*C.VkFramebuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PFramebuffer)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateFramebuffer(cDevice, cPCreateInfo, cPAllocator, cPFramebuffer)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSFramebufferCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyFramebuffer function as declared in vulkan/vulkan_core.h:3342
func DestroyFramebuffer(Device Device, Framebuffer Framebuffer, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cFramebuffer, _ := *(*C.VkFramebuffer)(unsafe.Pointer(&Framebuffer)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyFramebuffer(cDevice, cFramebuffer, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateRenderPass function as declared in vulkan/vulkan_core.h:3347
func CreateRenderPass(Device Device, PCreateInfo []RenderPassCreateInfo, PAllocator []AllocationCallbacks, PRenderPass []RenderPass) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSRenderPassCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPRenderPass, _ := (*C.VkRenderPass)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PRenderPass)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateRenderPass(cDevice, cPCreateInfo, cPAllocator, cPRenderPass)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSRenderPassCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyRenderPass function as declared in vulkan/vulkan_core.h:3353
func DestroyRenderPass(Device Device, RenderPass RenderPass, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cRenderPass, _ := *(*C.VkRenderPass)(unsafe.Pointer(&RenderPass)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyRenderPass(cDevice, cRenderPass, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetRenderAreaGranularity function as declared in vulkan/vulkan_core.h:3358
func GetRenderAreaGranularity(Device Device, RenderPass RenderPass, PGranularity []Extent2D) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cRenderPass, _ := *(*C.VkRenderPass)(unsafe.Pointer(&RenderPass)), cgoAllocsUnknown
	cPGranularity, _ := unpackArgSExtent2D(PGranularity)
	C.vkGetRenderAreaGranularity(cDevice, cRenderPass, cPGranularity)
	packSExtent2D(PGranularity, cPGranularity)
}

// CreateCommandPool function as declared in vulkan/vulkan_core.h:3363
func CreateCommandPool(Device Device, PCreateInfo []CommandPoolCreateInfo, PAllocator []AllocationCallbacks, PCommandPool []CommandPool) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSCommandPoolCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPCommandPool, _ := (*C.VkCommandPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PCommandPool)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateCommandPool(cDevice, cPCreateInfo, cPAllocator, cPCommandPool)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSCommandPoolCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyCommandPool function as declared in vulkan/vulkan_core.h:3369
func DestroyCommandPool(Device Device, CommandPool CommandPool, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cCommandPool, _ := *(*C.VkCommandPool)(unsafe.Pointer(&CommandPool)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyCommandPool(cDevice, cCommandPool, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// ResetCommandPool function as declared in vulkan/vulkan_core.h:3374
func ResetCommandPool(Device Device, CommandPool CommandPool, Flags CommandPoolResetFlags) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cCommandPool, _ := *(*C.VkCommandPool)(unsafe.Pointer(&CommandPool)), cgoAllocsUnknown
	cFlags, _ := (C.VkCommandPoolResetFlags)(Flags), cgoAllocsUnknown
	__ret := C.vkResetCommandPool(cDevice, cCommandPool, cFlags)
	__v := (Result)(__ret)
	return __v
}

// AllocateCommandBuffers function as declared in vulkan/vulkan_core.h:3379
func AllocateCommandBuffers(Device Device, PAllocateInfo []CommandBufferAllocateInfo, PCommandBuffers []CommandBuffer) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPAllocateInfo, _ := unpackArgSCommandBufferAllocateInfo(PAllocateInfo)
	cPCommandBuffers, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PCommandBuffers)).Data)), cgoAllocsUnknown
	__ret := C.vkAllocateCommandBuffers(cDevice, cPAllocateInfo, cPCommandBuffers)
	packSCommandBufferAllocateInfo(PAllocateInfo, cPAllocateInfo)
	__v := (Result)(__ret)
	return __v
}

// FreeCommandBuffers function as declared in vulkan/vulkan_core.h:3384
func FreeCommandBuffers(Device Device, CommandPool CommandPool, CommandBufferCount uint32, PCommandBuffers []CommandBuffer) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cCommandPool, _ := *(*C.VkCommandPool)(unsafe.Pointer(&CommandPool)), cgoAllocsUnknown
	cCommandBufferCount, _ := (C.uint32_t)(CommandBufferCount), cgoAllocsUnknown
	cPCommandBuffers, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PCommandBuffers)).Data)), cgoAllocsUnknown
	C.vkFreeCommandBuffers(cDevice, cCommandPool, cCommandBufferCount, cPCommandBuffers)
}

// BeginCommandBuffer function as declared in vulkan/vulkan_core.h:3390
func BeginCommandBuffer(CommandBuffer CommandBuffer, PBeginInfo []CommandBufferBeginInfo) Result {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPBeginInfo, _ := unpackArgSCommandBufferBeginInfo(PBeginInfo)
	__ret := C.vkBeginCommandBuffer(cCommandBuffer, cPBeginInfo)
	packSCommandBufferBeginInfo(PBeginInfo, cPBeginInfo)
	__v := (Result)(__ret)
	return __v
}

// EndCommandBuffer function as declared in vulkan/vulkan_core.h:3394
func EndCommandBuffer(CommandBuffer CommandBuffer) Result {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	__ret := C.vkEndCommandBuffer(cCommandBuffer)
	__v := (Result)(__ret)
	return __v
}

// ResetCommandBuffer function as declared in vulkan/vulkan_core.h:3397
func ResetCommandBuffer(CommandBuffer CommandBuffer, Flags CommandBufferResetFlags) Result {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cFlags, _ := (C.VkCommandBufferResetFlags)(Flags), cgoAllocsUnknown
	__ret := C.vkResetCommandBuffer(cCommandBuffer, cFlags)
	__v := (Result)(__ret)
	return __v
}

// CmdBindPipeline function as declared in vulkan/vulkan_core.h:3401
func CmdBindPipeline(CommandBuffer CommandBuffer, PipelineBindPoint PipelineBindPoint, Pipeline Pipeline) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPipelineBindPoint, _ := (C.VkPipelineBindPoint)(PipelineBindPoint), cgoAllocsUnknown
	cPipeline, _ := *(*C.VkPipeline)(unsafe.Pointer(&Pipeline)), cgoAllocsUnknown
	C.vkCmdBindPipeline(cCommandBuffer, cPipelineBindPoint, cPipeline)
}

// CmdSetViewport function as declared in vulkan/vulkan_core.h:3406
func CmdSetViewport(CommandBuffer CommandBuffer, FirstViewport uint32, ViewportCount uint32, PViewports []Viewport) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cFirstViewport, _ := (C.uint32_t)(FirstViewport), cgoAllocsUnknown
	cViewportCount, _ := (C.uint32_t)(ViewportCount), cgoAllocsUnknown
	cPViewports, _ := unpackArgSViewport(PViewports)
	C.vkCmdSetViewport(cCommandBuffer, cFirstViewport, cViewportCount, cPViewports)
	packSViewport(PViewports, cPViewports)
}

// CmdSetScissor function as declared in vulkan/vulkan_core.h:3412
func CmdSetScissor(CommandBuffer CommandBuffer, FirstScissor uint32, ScissorCount uint32, PScissors []Rect2D) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cFirstScissor, _ := (C.uint32_t)(FirstScissor), cgoAllocsUnknown
	cScissorCount, _ := (C.uint32_t)(ScissorCount), cgoAllocsUnknown
	cPScissors, _ := unpackArgSRect2D(PScissors)
	C.vkCmdSetScissor(cCommandBuffer, cFirstScissor, cScissorCount, cPScissors)
	packSRect2D(PScissors, cPScissors)
}

// CmdSetLineWidth function as declared in vulkan/vulkan_core.h:3418
func CmdSetLineWidth(CommandBuffer CommandBuffer, LineWidth float32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cLineWidth, _ := (C.float)(LineWidth), cgoAllocsUnknown
	C.vkCmdSetLineWidth(cCommandBuffer, cLineWidth)
}

// CmdSetDepthBias function as declared in vulkan/vulkan_core.h:3422
func CmdSetDepthBias(CommandBuffer CommandBuffer, DepthBiasConstantFactor float32, DepthBiasClamp float32, DepthBiasSlopeFactor float32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cDepthBiasConstantFactor, _ := (C.float)(DepthBiasConstantFactor), cgoAllocsUnknown
	cDepthBiasClamp, _ := (C.float)(DepthBiasClamp), cgoAllocsUnknown
	cDepthBiasSlopeFactor, _ := (C.float)(DepthBiasSlopeFactor), cgoAllocsUnknown
	C.vkCmdSetDepthBias(cCommandBuffer, cDepthBiasConstantFactor, cDepthBiasClamp, cDepthBiasSlopeFactor)
}

// CmdSetBlendConstants function as declared in vulkan/vulkan_core.h:3428
func CmdSetBlendConstants(CommandBuffer CommandBuffer, BlendConstants *[4]float32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBlendConstants, _ := *(**C.float)(unsafe.Pointer(&BlendConstants)), cgoAllocsUnknown
	C.vkCmdSetBlendConstants(cCommandBuffer, cBlendConstants)
}

// CmdSetDepthBounds function as declared in vulkan/vulkan_core.h:3432
func CmdSetDepthBounds(CommandBuffer CommandBuffer, MinDepthBounds float32, MaxDepthBounds float32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cMinDepthBounds, _ := (C.float)(MinDepthBounds), cgoAllocsUnknown
	cMaxDepthBounds, _ := (C.float)(MaxDepthBounds), cgoAllocsUnknown
	C.vkCmdSetDepthBounds(cCommandBuffer, cMinDepthBounds, cMaxDepthBounds)
}

// CmdSetStencilCompareMask function as declared in vulkan/vulkan_core.h:3437
func CmdSetStencilCompareMask(CommandBuffer CommandBuffer, FaceMask StencilFaceFlags, CompareMask uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cFaceMask, _ := (C.VkStencilFaceFlags)(FaceMask), cgoAllocsUnknown
	cCompareMask, _ := (C.uint32_t)(CompareMask), cgoAllocsUnknown
	C.vkCmdSetStencilCompareMask(cCommandBuffer, cFaceMask, cCompareMask)
}

// CmdSetStencilWriteMask function as declared in vulkan/vulkan_core.h:3442
func CmdSetStencilWriteMask(CommandBuffer CommandBuffer, FaceMask StencilFaceFlags, WriteMask uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cFaceMask, _ := (C.VkStencilFaceFlags)(FaceMask), cgoAllocsUnknown
	cWriteMask, _ := (C.uint32_t)(WriteMask), cgoAllocsUnknown
	C.vkCmdSetStencilWriteMask(cCommandBuffer, cFaceMask, cWriteMask)
}

// CmdSetStencilReference function as declared in vulkan/vulkan_core.h:3447
func CmdSetStencilReference(CommandBuffer CommandBuffer, FaceMask StencilFaceFlags, Reference uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cFaceMask, _ := (C.VkStencilFaceFlags)(FaceMask), cgoAllocsUnknown
	cReference, _ := (C.uint32_t)(Reference), cgoAllocsUnknown
	C.vkCmdSetStencilReference(cCommandBuffer, cFaceMask, cReference)
}

// CmdBindDescriptorSets function as declared in vulkan/vulkan_core.h:3452
func CmdBindDescriptorSets(CommandBuffer CommandBuffer, PipelineBindPoint PipelineBindPoint, Layout PipelineLayout, FirstSet uint32, DescriptorSetCount uint32, PDescriptorSets []DescriptorSet, DynamicOffsetCount uint32, PDynamicOffsets []uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPipelineBindPoint, _ := (C.VkPipelineBindPoint)(PipelineBindPoint), cgoAllocsUnknown
	cLayout, _ := *(*C.VkPipelineLayout)(unsafe.Pointer(&Layout)), cgoAllocsUnknown
	cFirstSet, _ := (C.uint32_t)(FirstSet), cgoAllocsUnknown
	cDescriptorSetCount, _ := (C.uint32_t)(DescriptorSetCount), cgoAllocsUnknown
	cPDescriptorSets, _ := (*C.VkDescriptorSet)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDescriptorSets)).Data)), cgoAllocsUnknown
	cDynamicOffsetCount, _ := (C.uint32_t)(DynamicOffsetCount), cgoAllocsUnknown
	cPDynamicOffsets, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDynamicOffsets)).Data)), cgoAllocsUnknown
	C.vkCmdBindDescriptorSets(cCommandBuffer, cPipelineBindPoint, cLayout, cFirstSet, cDescriptorSetCount, cPDescriptorSets, cDynamicOffsetCount, cPDynamicOffsets)
}

// CmdBindIndexBuffer function as declared in vulkan/vulkan_core.h:3462
func CmdBindIndexBuffer(CommandBuffer CommandBuffer, Buffer Buffer, Offset DeviceSize, IndexType IndexType) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cIndexType, _ := (C.VkIndexType)(IndexType), cgoAllocsUnknown
	C.vkCmdBindIndexBuffer(cCommandBuffer, cBuffer, cOffset, cIndexType)
}

// CmdBindVertexBuffers function as declared in vulkan/vulkan_core.h:3468
func CmdBindVertexBuffers(CommandBuffer CommandBuffer, FirstBinding uint32, BindingCount uint32, PBuffers []Buffer, POffsets []DeviceSize) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cFirstBinding, _ := (C.uint32_t)(FirstBinding), cgoAllocsUnknown
	cBindingCount, _ := (C.uint32_t)(BindingCount), cgoAllocsUnknown
	cPBuffers, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PBuffers)).Data)), cgoAllocsUnknown
	cPOffsets, _ := (*C.VkDeviceSize)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&POffsets)).Data)), cgoAllocsUnknown
	C.vkCmdBindVertexBuffers(cCommandBuffer, cFirstBinding, cBindingCount, cPBuffers, cPOffsets)
}

// CmdDraw function as declared in vulkan/vulkan_core.h:3475
func CmdDraw(CommandBuffer CommandBuffer, VertexCount uint32, InstanceCount uint32, FirstVertex uint32, FirstInstance uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cVertexCount, _ := (C.uint32_t)(VertexCount), cgoAllocsUnknown
	cInstanceCount, _ := (C.uint32_t)(InstanceCount), cgoAllocsUnknown
	cFirstVertex, _ := (C.uint32_t)(FirstVertex), cgoAllocsUnknown
	cFirstInstance, _ := (C.uint32_t)(FirstInstance), cgoAllocsUnknown
	C.vkCmdDraw(cCommandBuffer, cVertexCount, cInstanceCount, cFirstVertex, cFirstInstance)
}

// CmdDrawIndexed function as declared in vulkan/vulkan_core.h:3482
func CmdDrawIndexed(CommandBuffer CommandBuffer, IndexCount uint32, InstanceCount uint32, FirstIndex uint32, VertexOffset int32, FirstInstance uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cIndexCount, _ := (C.uint32_t)(IndexCount), cgoAllocsUnknown
	cInstanceCount, _ := (C.uint32_t)(InstanceCount), cgoAllocsUnknown
	cFirstIndex, _ := (C.uint32_t)(FirstIndex), cgoAllocsUnknown
	cVertexOffset, _ := (C.int32_t)(VertexOffset), cgoAllocsUnknown
	cFirstInstance, _ := (C.uint32_t)(FirstInstance), cgoAllocsUnknown
	C.vkCmdDrawIndexed(cCommandBuffer, cIndexCount, cInstanceCount, cFirstIndex, cVertexOffset, cFirstInstance)
}

// CmdDrawIndirect function as declared in vulkan/vulkan_core.h:3490
func CmdDrawIndirect(CommandBuffer CommandBuffer, Buffer Buffer, Offset DeviceSize, DrawCount uint32, Stride uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cDrawCount, _ := (C.uint32_t)(DrawCount), cgoAllocsUnknown
	cStride, _ := (C.uint32_t)(Stride), cgoAllocsUnknown
	C.vkCmdDrawIndirect(cCommandBuffer, cBuffer, cOffset, cDrawCount, cStride)
}

// CmdDrawIndexedIndirect function as declared in vulkan/vulkan_core.h:3497
func CmdDrawIndexedIndirect(CommandBuffer CommandBuffer, Buffer Buffer, Offset DeviceSize, DrawCount uint32, Stride uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cDrawCount, _ := (C.uint32_t)(DrawCount), cgoAllocsUnknown
	cStride, _ := (C.uint32_t)(Stride), cgoAllocsUnknown
	C.vkCmdDrawIndexedIndirect(cCommandBuffer, cBuffer, cOffset, cDrawCount, cStride)
}

// CmdDispatch function as declared in vulkan/vulkan_core.h:3504
func CmdDispatch(CommandBuffer CommandBuffer, GroupCountX uint32, GroupCountY uint32, GroupCountZ uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cGroupCountX, _ := (C.uint32_t)(GroupCountX), cgoAllocsUnknown
	cGroupCountY, _ := (C.uint32_t)(GroupCountY), cgoAllocsUnknown
	cGroupCountZ, _ := (C.uint32_t)(GroupCountZ), cgoAllocsUnknown
	C.vkCmdDispatch(cCommandBuffer, cGroupCountX, cGroupCountY, cGroupCountZ)
}

// CmdDispatchIndirect function as declared in vulkan/vulkan_core.h:3510
func CmdDispatchIndirect(CommandBuffer CommandBuffer, Buffer Buffer, Offset DeviceSize) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	C.vkCmdDispatchIndirect(cCommandBuffer, cBuffer, cOffset)
}

// CmdCopyBuffer function as declared in vulkan/vulkan_core.h:3515
func CmdCopyBuffer(CommandBuffer CommandBuffer, SrcBuffer Buffer, DstBuffer Buffer, RegionCount uint32, PRegions []BufferCopy) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cSrcBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&SrcBuffer)), cgoAllocsUnknown
	cDstBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&DstBuffer)), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSBufferCopy(PRegions)
	C.vkCmdCopyBuffer(cCommandBuffer, cSrcBuffer, cDstBuffer, cRegionCount, cPRegions)
	packSBufferCopy(PRegions, cPRegions)
}

// CmdCopyImage function as declared in vulkan/vulkan_core.h:3522
func CmdCopyImage(CommandBuffer CommandBuffer, SrcImage Image, SrcImageLayout ImageLayout, DstImage Image, DstImageLayout ImageLayout, RegionCount uint32, PRegions []ImageCopy) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cSrcImage, _ := *(*C.VkImage)(unsafe.Pointer(&SrcImage)), cgoAllocsUnknown
	cSrcImageLayout, _ := (C.VkImageLayout)(SrcImageLayout), cgoAllocsUnknown
	cDstImage, _ := *(*C.VkImage)(unsafe.Pointer(&DstImage)), cgoAllocsUnknown
	cDstImageLayout, _ := (C.VkImageLayout)(DstImageLayout), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSImageCopy(PRegions)
	C.vkCmdCopyImage(cCommandBuffer, cSrcImage, cSrcImageLayout, cDstImage, cDstImageLayout, cRegionCount, cPRegions)
	packSImageCopy(PRegions, cPRegions)
}

// CmdBlitImage function as declared in vulkan/vulkan_core.h:3531
func CmdBlitImage(CommandBuffer CommandBuffer, SrcImage Image, SrcImageLayout ImageLayout, DstImage Image, DstImageLayout ImageLayout, RegionCount uint32, PRegions []ImageBlit, Filter Filter) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cSrcImage, _ := *(*C.VkImage)(unsafe.Pointer(&SrcImage)), cgoAllocsUnknown
	cSrcImageLayout, _ := (C.VkImageLayout)(SrcImageLayout), cgoAllocsUnknown
	cDstImage, _ := *(*C.VkImage)(unsafe.Pointer(&DstImage)), cgoAllocsUnknown
	cDstImageLayout, _ := (C.VkImageLayout)(DstImageLayout), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSImageBlit(PRegions)
	cFilter, _ := (C.VkFilter)(Filter), cgoAllocsUnknown
	C.vkCmdBlitImage(cCommandBuffer, cSrcImage, cSrcImageLayout, cDstImage, cDstImageLayout, cRegionCount, cPRegions, cFilter)
	packSImageBlit(PRegions, cPRegions)
}

// CmdCopyBufferToImage function as declared in vulkan/vulkan_core.h:3541
func CmdCopyBufferToImage(CommandBuffer CommandBuffer, SrcBuffer Buffer, DstImage Image, DstImageLayout ImageLayout, RegionCount uint32, PRegions []BufferImageCopy) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cSrcBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&SrcBuffer)), cgoAllocsUnknown
	cDstImage, _ := *(*C.VkImage)(unsafe.Pointer(&DstImage)), cgoAllocsUnknown
	cDstImageLayout, _ := (C.VkImageLayout)(DstImageLayout), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSBufferImageCopy(PRegions)
	C.vkCmdCopyBufferToImage(cCommandBuffer, cSrcBuffer, cDstImage, cDstImageLayout, cRegionCount, cPRegions)
	packSBufferImageCopy(PRegions, cPRegions)
}

// CmdCopyImageToBuffer function as declared in vulkan/vulkan_core.h:3549
func CmdCopyImageToBuffer(CommandBuffer CommandBuffer, SrcImage Image, SrcImageLayout ImageLayout, DstBuffer Buffer, RegionCount uint32, PRegions []BufferImageCopy) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cSrcImage, _ := *(*C.VkImage)(unsafe.Pointer(&SrcImage)), cgoAllocsUnknown
	cSrcImageLayout, _ := (C.VkImageLayout)(SrcImageLayout), cgoAllocsUnknown
	cDstBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&DstBuffer)), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSBufferImageCopy(PRegions)
	C.vkCmdCopyImageToBuffer(cCommandBuffer, cSrcImage, cSrcImageLayout, cDstBuffer, cRegionCount, cPRegions)
	packSBufferImageCopy(PRegions, cPRegions)
}

// CmdUpdateBuffer function as declared in vulkan/vulkan_core.h:3557
func CmdUpdateBuffer(CommandBuffer CommandBuffer, DstBuffer Buffer, DstOffset DeviceSize, DataSize DeviceSize, PData unsafe.Pointer) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cDstBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&DstBuffer)), cgoAllocsUnknown
	cDstOffset, _ := (C.VkDeviceSize)(DstOffset), cgoAllocsUnknown
	cDataSize, _ := (C.VkDeviceSize)(DataSize), cgoAllocsUnknown
	cPData, _ := PData, cgoAllocsUnknown
	C.vkCmdUpdateBuffer(cCommandBuffer, cDstBuffer, cDstOffset, cDataSize, cPData)
}

// CmdFillBuffer function as declared in vulkan/vulkan_core.h:3564
func CmdFillBuffer(CommandBuffer CommandBuffer, DstBuffer Buffer, DstOffset DeviceSize, Size DeviceSize, Data uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cDstBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&DstBuffer)), cgoAllocsUnknown
	cDstOffset, _ := (C.VkDeviceSize)(DstOffset), cgoAllocsUnknown
	cSize, _ := (C.VkDeviceSize)(Size), cgoAllocsUnknown
	cData, _ := (C.uint32_t)(Data), cgoAllocsUnknown
	C.vkCmdFillBuffer(cCommandBuffer, cDstBuffer, cDstOffset, cSize, cData)
}

// CmdClearColorImage function as declared in vulkan/vulkan_core.h:3571
func CmdClearColorImage(CommandBuffer CommandBuffer, Image Image, ImageLayout ImageLayout, PColor []ClearColorValue, RangeCount uint32, PRanges []ImageSubresourceRange) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cImage, _ := *(*C.VkImage)(unsafe.Pointer(&Image)), cgoAllocsUnknown
	cImageLayout, _ := (C.VkImageLayout)(ImageLayout), cgoAllocsUnknown
	cPColor, _ := (*C.VkClearColorValue)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PColor)).Data)), cgoAllocsUnknown
	cRangeCount, _ := (C.uint32_t)(RangeCount), cgoAllocsUnknown
	cPRanges, _ := unpackArgSImageSubresourceRange(PRanges)
	C.vkCmdClearColorImage(cCommandBuffer, cImage, cImageLayout, cPColor, cRangeCount, cPRanges)
	packSImageSubresourceRange(PRanges, cPRanges)
}

// CmdClearDepthStencilImage function as declared in vulkan/vulkan_core.h:3579
func CmdClearDepthStencilImage(CommandBuffer CommandBuffer, Image Image, ImageLayout ImageLayout, PDepthStencil []ClearDepthStencilValue, RangeCount uint32, PRanges []ImageSubresourceRange) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cImage, _ := *(*C.VkImage)(unsafe.Pointer(&Image)), cgoAllocsUnknown
	cImageLayout, _ := (C.VkImageLayout)(ImageLayout), cgoAllocsUnknown
	cPDepthStencil, _ := unpackArgSClearDepthStencilValue(PDepthStencil)
	cRangeCount, _ := (C.uint32_t)(RangeCount), cgoAllocsUnknown
	cPRanges, _ := unpackArgSImageSubresourceRange(PRanges)
	C.vkCmdClearDepthStencilImage(cCommandBuffer, cImage, cImageLayout, cPDepthStencil, cRangeCount, cPRanges)
	packSImageSubresourceRange(PRanges, cPRanges)
	packSClearDepthStencilValue(PDepthStencil, cPDepthStencil)
}

// CmdClearAttachments function as declared in vulkan/vulkan_core.h:3587
func CmdClearAttachments(CommandBuffer CommandBuffer, AttachmentCount uint32, PAttachments []ClearAttachment, RectCount uint32, PRects []ClearRect) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cAttachmentCount, _ := (C.uint32_t)(AttachmentCount), cgoAllocsUnknown
	cPAttachments, _ := unpackArgSClearAttachment(PAttachments)
	cRectCount, _ := (C.uint32_t)(RectCount), cgoAllocsUnknown
	cPRects, _ := unpackArgSClearRect(PRects)
	C.vkCmdClearAttachments(cCommandBuffer, cAttachmentCount, cPAttachments, cRectCount, cPRects)
	packSClearRect(PRects, cPRects)
	packSClearAttachment(PAttachments, cPAttachments)
}

// CmdResolveImage function as declared in vulkan/vulkan_core.h:3594
func CmdResolveImage(CommandBuffer CommandBuffer, SrcImage Image, SrcImageLayout ImageLayout, DstImage Image, DstImageLayout ImageLayout, RegionCount uint32, PRegions []ImageResolve) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cSrcImage, _ := *(*C.VkImage)(unsafe.Pointer(&SrcImage)), cgoAllocsUnknown
	cSrcImageLayout, _ := (C.VkImageLayout)(SrcImageLayout), cgoAllocsUnknown
	cDstImage, _ := *(*C.VkImage)(unsafe.Pointer(&DstImage)), cgoAllocsUnknown
	cDstImageLayout, _ := (C.VkImageLayout)(DstImageLayout), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSImageResolve(PRegions)
	C.vkCmdResolveImage(cCommandBuffer, cSrcImage, cSrcImageLayout, cDstImage, cDstImageLayout, cRegionCount, cPRegions)
	packSImageResolve(PRegions, cPRegions)
}

// CmdSetEvent function as declared in vulkan/vulkan_core.h:3603
func CmdSetEvent(CommandBuffer CommandBuffer, Event Event, StageMask PipelineStageFlags) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cEvent, _ := *(*C.VkEvent)(unsafe.Pointer(&Event)), cgoAllocsUnknown
	cStageMask, _ := (C.VkPipelineStageFlags)(StageMask), cgoAllocsUnknown
	C.vkCmdSetEvent(cCommandBuffer, cEvent, cStageMask)
}

// CmdResetEvent function as declared in vulkan/vulkan_core.h:3608
func CmdResetEvent(CommandBuffer CommandBuffer, Event Event, StageMask PipelineStageFlags) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cEvent, _ := *(*C.VkEvent)(unsafe.Pointer(&Event)), cgoAllocsUnknown
	cStageMask, _ := (C.VkPipelineStageFlags)(StageMask), cgoAllocsUnknown
	C.vkCmdResetEvent(cCommandBuffer, cEvent, cStageMask)
}

// CmdWaitEvents function as declared in vulkan/vulkan_core.h:3613
func CmdWaitEvents(CommandBuffer CommandBuffer, EventCount uint32, PEvents []Event, SrcStageMask PipelineStageFlags, DstStageMask PipelineStageFlags, MemoryBarrierCount uint32, PMemoryBarriers []MemoryBarrier, BufferMemoryBarrierCount uint32, PBufferMemoryBarriers []BufferMemoryBarrier, ImageMemoryBarrierCount uint32, PImageMemoryBarriers []ImageMemoryBarrier) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cEventCount, _ := (C.uint32_t)(EventCount), cgoAllocsUnknown
	cPEvents, _ := (*C.VkEvent)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PEvents)).Data)), cgoAllocsUnknown
	cSrcStageMask, _ := (C.VkPipelineStageFlags)(SrcStageMask), cgoAllocsUnknown
	cDstStageMask, _ := (C.VkPipelineStageFlags)(DstStageMask), cgoAllocsUnknown
	cMemoryBarrierCount, _ := (C.uint32_t)(MemoryBarrierCount), cgoAllocsUnknown
	cPMemoryBarriers, _ := unpackArgSMemoryBarrier(PMemoryBarriers)
	cBufferMemoryBarrierCount, _ := (C.uint32_t)(BufferMemoryBarrierCount), cgoAllocsUnknown
	cPBufferMemoryBarriers, _ := unpackArgSBufferMemoryBarrier(PBufferMemoryBarriers)
	cImageMemoryBarrierCount, _ := (C.uint32_t)(ImageMemoryBarrierCount), cgoAllocsUnknown
	cPImageMemoryBarriers, _ := unpackArgSImageMemoryBarrier(PImageMemoryBarriers)
	C.vkCmdWaitEvents(cCommandBuffer, cEventCount, cPEvents, cSrcStageMask, cDstStageMask, cMemoryBarrierCount, cPMemoryBarriers, cBufferMemoryBarrierCount, cPBufferMemoryBarriers, cImageMemoryBarrierCount, cPImageMemoryBarriers)
	packSImageMemoryBarrier(PImageMemoryBarriers, cPImageMemoryBarriers)
	packSBufferMemoryBarrier(PBufferMemoryBarriers, cPBufferMemoryBarriers)
	packSMemoryBarrier(PMemoryBarriers, cPMemoryBarriers)
}

// CmdPipelineBarrier function as declared in vulkan/vulkan_core.h:3626
func CmdPipelineBarrier(CommandBuffer CommandBuffer, SrcStageMask PipelineStageFlags, DstStageMask PipelineStageFlags, DependencyFlags DependencyFlags, MemoryBarrierCount uint32, PMemoryBarriers []MemoryBarrier, BufferMemoryBarrierCount uint32, PBufferMemoryBarriers []BufferMemoryBarrier, ImageMemoryBarrierCount uint32, PImageMemoryBarriers []ImageMemoryBarrier) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cSrcStageMask, _ := (C.VkPipelineStageFlags)(SrcStageMask), cgoAllocsUnknown
	cDstStageMask, _ := (C.VkPipelineStageFlags)(DstStageMask), cgoAllocsUnknown
	cDependencyFlags, _ := (C.VkDependencyFlags)(DependencyFlags), cgoAllocsUnknown
	cMemoryBarrierCount, _ := (C.uint32_t)(MemoryBarrierCount), cgoAllocsUnknown
	cPMemoryBarriers, _ := unpackArgSMemoryBarrier(PMemoryBarriers)
	cBufferMemoryBarrierCount, _ := (C.uint32_t)(BufferMemoryBarrierCount), cgoAllocsUnknown
	cPBufferMemoryBarriers, _ := unpackArgSBufferMemoryBarrier(PBufferMemoryBarriers)
	cImageMemoryBarrierCount, _ := (C.uint32_t)(ImageMemoryBarrierCount), cgoAllocsUnknown
	cPImageMemoryBarriers, _ := unpackArgSImageMemoryBarrier(PImageMemoryBarriers)
	C.vkCmdPipelineBarrier(cCommandBuffer, cSrcStageMask, cDstStageMask, cDependencyFlags, cMemoryBarrierCount, cPMemoryBarriers, cBufferMemoryBarrierCount, cPBufferMemoryBarriers, cImageMemoryBarrierCount, cPImageMemoryBarriers)
	packSImageMemoryBarrier(PImageMemoryBarriers, cPImageMemoryBarriers)
	packSBufferMemoryBarrier(PBufferMemoryBarriers, cPBufferMemoryBarriers)
	packSMemoryBarrier(PMemoryBarriers, cPMemoryBarriers)
}

// CmdBeginQuery function as declared in vulkan/vulkan_core.h:3638
func CmdBeginQuery(CommandBuffer CommandBuffer, QueryPool QueryPool, Query uint32, Flags QueryControlFlags) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cQueryPool, _ := *(*C.VkQueryPool)(unsafe.Pointer(&QueryPool)), cgoAllocsUnknown
	cQuery, _ := (C.uint32_t)(Query), cgoAllocsUnknown
	cFlags, _ := (C.VkQueryControlFlags)(Flags), cgoAllocsUnknown
	C.vkCmdBeginQuery(cCommandBuffer, cQueryPool, cQuery, cFlags)
}

// CmdEndQuery function as declared in vulkan/vulkan_core.h:3644
func CmdEndQuery(CommandBuffer CommandBuffer, QueryPool QueryPool, Query uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cQueryPool, _ := *(*C.VkQueryPool)(unsafe.Pointer(&QueryPool)), cgoAllocsUnknown
	cQuery, _ := (C.uint32_t)(Query), cgoAllocsUnknown
	C.vkCmdEndQuery(cCommandBuffer, cQueryPool, cQuery)
}

// CmdResetQueryPool function as declared in vulkan/vulkan_core.h:3649
func CmdResetQueryPool(CommandBuffer CommandBuffer, QueryPool QueryPool, FirstQuery uint32, QueryCount uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cQueryPool, _ := *(*C.VkQueryPool)(unsafe.Pointer(&QueryPool)), cgoAllocsUnknown
	cFirstQuery, _ := (C.uint32_t)(FirstQuery), cgoAllocsUnknown
	cQueryCount, _ := (C.uint32_t)(QueryCount), cgoAllocsUnknown
	C.vkCmdResetQueryPool(cCommandBuffer, cQueryPool, cFirstQuery, cQueryCount)
}

// CmdWriteTimestamp function as declared in vulkan/vulkan_core.h:3655
func CmdWriteTimestamp(CommandBuffer CommandBuffer, PipelineStage PipelineStageFlagBits, QueryPool QueryPool, Query uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPipelineStage, _ := (C.VkPipelineStageFlagBits)(PipelineStage), cgoAllocsUnknown
	cQueryPool, _ := *(*C.VkQueryPool)(unsafe.Pointer(&QueryPool)), cgoAllocsUnknown
	cQuery, _ := (C.uint32_t)(Query), cgoAllocsUnknown
	C.vkCmdWriteTimestamp(cCommandBuffer, cPipelineStage, cQueryPool, cQuery)
}

// CmdCopyQueryPoolResults function as declared in vulkan/vulkan_core.h:3661
func CmdCopyQueryPoolResults(CommandBuffer CommandBuffer, QueryPool QueryPool, FirstQuery uint32, QueryCount uint32, DstBuffer Buffer, DstOffset DeviceSize, Stride DeviceSize, Flags QueryResultFlags) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cQueryPool, _ := *(*C.VkQueryPool)(unsafe.Pointer(&QueryPool)), cgoAllocsUnknown
	cFirstQuery, _ := (C.uint32_t)(FirstQuery), cgoAllocsUnknown
	cQueryCount, _ := (C.uint32_t)(QueryCount), cgoAllocsUnknown
	cDstBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&DstBuffer)), cgoAllocsUnknown
	cDstOffset, _ := (C.VkDeviceSize)(DstOffset), cgoAllocsUnknown
	cStride, _ := (C.VkDeviceSize)(Stride), cgoAllocsUnknown
	cFlags, _ := (C.VkQueryResultFlags)(Flags), cgoAllocsUnknown
	C.vkCmdCopyQueryPoolResults(cCommandBuffer, cQueryPool, cFirstQuery, cQueryCount, cDstBuffer, cDstOffset, cStride, cFlags)
}

// CmdPushConstants function as declared in vulkan/vulkan_core.h:3671
func CmdPushConstants(CommandBuffer CommandBuffer, Layout PipelineLayout, StageFlags ShaderStageFlags, Offset uint32, Size uint32, PValues unsafe.Pointer) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cLayout, _ := *(*C.VkPipelineLayout)(unsafe.Pointer(&Layout)), cgoAllocsUnknown
	cStageFlags, _ := (C.VkShaderStageFlags)(StageFlags), cgoAllocsUnknown
	cOffset, _ := (C.uint32_t)(Offset), cgoAllocsUnknown
	cSize, _ := (C.uint32_t)(Size), cgoAllocsUnknown
	cPValues, _ := PValues, cgoAllocsUnknown
	C.vkCmdPushConstants(cCommandBuffer, cLayout, cStageFlags, cOffset, cSize, cPValues)
}

// CmdBeginRenderPass function as declared in vulkan/vulkan_core.h:3679
func CmdBeginRenderPass(CommandBuffer CommandBuffer, PRenderPassBegin []RenderPassBeginInfo, Contents SubpassContents) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPRenderPassBegin, _ := unpackArgSRenderPassBeginInfo(PRenderPassBegin)
	cContents, _ := (C.VkSubpassContents)(Contents), cgoAllocsUnknown
	C.vkCmdBeginRenderPass(cCommandBuffer, cPRenderPassBegin, cContents)
	packSRenderPassBeginInfo(PRenderPassBegin, cPRenderPassBegin)
}

// CmdNextSubpass function as declared in vulkan/vulkan_core.h:3684
func CmdNextSubpass(CommandBuffer CommandBuffer, Contents SubpassContents) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cContents, _ := (C.VkSubpassContents)(Contents), cgoAllocsUnknown
	C.vkCmdNextSubpass(cCommandBuffer, cContents)
}

// CmdEndRenderPass function as declared in vulkan/vulkan_core.h:3688
func CmdEndRenderPass(CommandBuffer CommandBuffer) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	C.vkCmdEndRenderPass(cCommandBuffer)
}

// CmdExecuteCommands function as declared in vulkan/vulkan_core.h:3691
func CmdExecuteCommands(CommandBuffer CommandBuffer, CommandBufferCount uint32, PCommandBuffers []CommandBuffer) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cCommandBufferCount, _ := (C.uint32_t)(CommandBufferCount), cgoAllocsUnknown
	cPCommandBuffers, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PCommandBuffers)).Data)), cgoAllocsUnknown
	C.vkCmdExecuteCommands(cCommandBuffer, cCommandBufferCount, cPCommandBuffers)
}

// EnumerateInstanceVersion function as declared in vulkan/vulkan_core.h:4427
func EnumerateInstanceVersion(PApiVersion []uint32) Result {
	cPApiVersion, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PApiVersion)).Data)), cgoAllocsUnknown
	__ret := C.vkEnumerateInstanceVersion(cPApiVersion)
	__v := (Result)(__ret)
	return __v
}

// BindBufferMemory2 function as declared in vulkan/vulkan_core.h:4430
func BindBufferMemory2(Device Device, BindInfoCount uint32, PBindInfos []BindBufferMemoryInfo) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cBindInfoCount, _ := (C.uint32_t)(BindInfoCount), cgoAllocsUnknown
	cPBindInfos, _ := unpackArgSBindBufferMemoryInfo(PBindInfos)
	__ret := C.vkBindBufferMemory2(cDevice, cBindInfoCount, cPBindInfos)
	packSBindBufferMemoryInfo(PBindInfos, cPBindInfos)
	__v := (Result)(__ret)
	return __v
}

// BindImageMemory2 function as declared in vulkan/vulkan_core.h:4435
func BindImageMemory2(Device Device, BindInfoCount uint32, PBindInfos []BindImageMemoryInfo) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cBindInfoCount, _ := (C.uint32_t)(BindInfoCount), cgoAllocsUnknown
	cPBindInfos, _ := unpackArgSBindImageMemoryInfo(PBindInfos)
	__ret := C.vkBindImageMemory2(cDevice, cBindInfoCount, cPBindInfos)
	packSBindImageMemoryInfo(PBindInfos, cPBindInfos)
	__v := (Result)(__ret)
	return __v
}

// GetDeviceGroupPeerMemoryFeatures function as declared in vulkan/vulkan_core.h:4440
func GetDeviceGroupPeerMemoryFeatures(Device Device, HeapIndex uint32, LocalDeviceIndex uint32, RemoteDeviceIndex uint32, PPeerMemoryFeatures []PeerMemoryFeatureFlags) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cHeapIndex, _ := (C.uint32_t)(HeapIndex), cgoAllocsUnknown
	cLocalDeviceIndex, _ := (C.uint32_t)(LocalDeviceIndex), cgoAllocsUnknown
	cRemoteDeviceIndex, _ := (C.uint32_t)(RemoteDeviceIndex), cgoAllocsUnknown
	cPPeerMemoryFeatures, _ := (*C.VkPeerMemoryFeatureFlags)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPeerMemoryFeatures)).Data)), cgoAllocsUnknown
	C.vkGetDeviceGroupPeerMemoryFeatures(cDevice, cHeapIndex, cLocalDeviceIndex, cRemoteDeviceIndex, cPPeerMemoryFeatures)
}

// CmdSetDeviceMask function as declared in vulkan/vulkan_core.h:4447
func CmdSetDeviceMask(CommandBuffer CommandBuffer, DeviceMask uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cDeviceMask, _ := (C.uint32_t)(DeviceMask), cgoAllocsUnknown
	C.vkCmdSetDeviceMask(cCommandBuffer, cDeviceMask)
}

// CmdDispatchBase function as declared in vulkan/vulkan_core.h:4451
func CmdDispatchBase(CommandBuffer CommandBuffer, BaseGroupX uint32, BaseGroupY uint32, BaseGroupZ uint32, GroupCountX uint32, GroupCountY uint32, GroupCountZ uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBaseGroupX, _ := (C.uint32_t)(BaseGroupX), cgoAllocsUnknown
	cBaseGroupY, _ := (C.uint32_t)(BaseGroupY), cgoAllocsUnknown
	cBaseGroupZ, _ := (C.uint32_t)(BaseGroupZ), cgoAllocsUnknown
	cGroupCountX, _ := (C.uint32_t)(GroupCountX), cgoAllocsUnknown
	cGroupCountY, _ := (C.uint32_t)(GroupCountY), cgoAllocsUnknown
	cGroupCountZ, _ := (C.uint32_t)(GroupCountZ), cgoAllocsUnknown
	C.vkCmdDispatchBase(cCommandBuffer, cBaseGroupX, cBaseGroupY, cBaseGroupZ, cGroupCountX, cGroupCountY, cGroupCountZ)
}

// EnumeratePhysicalDeviceGroups function as declared in vulkan/vulkan_core.h:4460
func EnumeratePhysicalDeviceGroups(Instance Instance, PPhysicalDeviceGroupCount []uint32, PPhysicalDeviceGroupProperties []PhysicalDeviceGroupProperties) Result {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cPPhysicalDeviceGroupCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPhysicalDeviceGroupCount)).Data)), cgoAllocsUnknown
	cPPhysicalDeviceGroupProperties, _ := unpackArgSPhysicalDeviceGroupProperties(PPhysicalDeviceGroupProperties)
	__ret := C.vkEnumeratePhysicalDeviceGroups(cInstance, cPPhysicalDeviceGroupCount, cPPhysicalDeviceGroupProperties)
	packSPhysicalDeviceGroupProperties(PPhysicalDeviceGroupProperties, cPPhysicalDeviceGroupProperties)
	__v := (Result)(__ret)
	return __v
}

// GetImageMemoryRequirements2 function as declared in vulkan/vulkan_core.h:4465
func GetImageMemoryRequirements2(Device Device, PInfo []ImageMemoryRequirementsInfo2, PMemoryRequirements []MemoryRequirements2) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPInfo, _ := unpackArgSImageMemoryRequirementsInfo2(PInfo)
	cPMemoryRequirements, _ := unpackArgSMemoryRequirements2(PMemoryRequirements)
	C.vkGetImageMemoryRequirements2(cDevice, cPInfo, cPMemoryRequirements)
	packSMemoryRequirements2(PMemoryRequirements, cPMemoryRequirements)
	packSImageMemoryRequirementsInfo2(PInfo, cPInfo)
}

// GetBufferMemoryRequirements2 function as declared in vulkan/vulkan_core.h:4470
func GetBufferMemoryRequirements2(Device Device, PInfo []BufferMemoryRequirementsInfo2, PMemoryRequirements []MemoryRequirements2) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPInfo, _ := unpackArgSBufferMemoryRequirementsInfo2(PInfo)
	cPMemoryRequirements, _ := unpackArgSMemoryRequirements2(PMemoryRequirements)
	C.vkGetBufferMemoryRequirements2(cDevice, cPInfo, cPMemoryRequirements)
	packSMemoryRequirements2(PMemoryRequirements, cPMemoryRequirements)
	packSBufferMemoryRequirementsInfo2(PInfo, cPInfo)
}

// GetImageSparseMemoryRequirements2 function as declared in vulkan/vulkan_core.h:4475
func GetImageSparseMemoryRequirements2(Device Device, PInfo []ImageSparseMemoryRequirementsInfo2, PSparseMemoryRequirementCount []uint32, PSparseMemoryRequirements []SparseImageMemoryRequirements2) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPInfo, _ := unpackArgSImageSparseMemoryRequirementsInfo2(PInfo)
	cPSparseMemoryRequirementCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSparseMemoryRequirementCount)).Data)), cgoAllocsUnknown
	cPSparseMemoryRequirements, _ := unpackArgSSparseImageMemoryRequirements2(PSparseMemoryRequirements)
	C.vkGetImageSparseMemoryRequirements2(cDevice, cPInfo, cPSparseMemoryRequirementCount, cPSparseMemoryRequirements)
	packSSparseImageMemoryRequirements2(PSparseMemoryRequirements, cPSparseMemoryRequirements)
	packSImageSparseMemoryRequirementsInfo2(PInfo, cPInfo)
}

// GetPhysicalDeviceFeatures2 function as declared in vulkan/vulkan_core.h:4481
func GetPhysicalDeviceFeatures2(PhysicalDevice PhysicalDevice, PFeatures []PhysicalDeviceFeatures2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPFeatures, _ := unpackArgSPhysicalDeviceFeatures2(PFeatures)
	C.vkGetPhysicalDeviceFeatures2(cPhysicalDevice, cPFeatures)
	packSPhysicalDeviceFeatures2(PFeatures, cPFeatures)
}

// GetPhysicalDeviceProperties2 function as declared in vulkan/vulkan_core.h:4485
func GetPhysicalDeviceProperties2(PhysicalDevice PhysicalDevice, PProperties []PhysicalDeviceProperties2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSPhysicalDeviceProperties2(PProperties)
	C.vkGetPhysicalDeviceProperties2(cPhysicalDevice, cPProperties)
	packSPhysicalDeviceProperties2(PProperties, cPProperties)
}

// GetPhysicalDeviceFormatProperties2 function as declared in vulkan/vulkan_core.h:4489
func GetPhysicalDeviceFormatProperties2(PhysicalDevice PhysicalDevice, Format Format, PFormatProperties []FormatProperties2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cFormat, _ := (C.VkFormat)(Format), cgoAllocsUnknown
	cPFormatProperties, _ := unpackArgSFormatProperties2(PFormatProperties)
	C.vkGetPhysicalDeviceFormatProperties2(cPhysicalDevice, cFormat, cPFormatProperties)
	packSFormatProperties2(PFormatProperties, cPFormatProperties)
}

// GetPhysicalDeviceImageFormatProperties2 function as declared in vulkan/vulkan_core.h:4494
func GetPhysicalDeviceImageFormatProperties2(PhysicalDevice PhysicalDevice, PImageFormatInfo []PhysicalDeviceImageFormatInfo2, PImageFormatProperties []ImageFormatProperties2) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPImageFormatInfo, _ := unpackArgSPhysicalDeviceImageFormatInfo2(PImageFormatInfo)
	cPImageFormatProperties, _ := unpackArgSImageFormatProperties2(PImageFormatProperties)
	__ret := C.vkGetPhysicalDeviceImageFormatProperties2(cPhysicalDevice, cPImageFormatInfo, cPImageFormatProperties)
	packSImageFormatProperties2(PImageFormatProperties, cPImageFormatProperties)
	packSPhysicalDeviceImageFormatInfo2(PImageFormatInfo, cPImageFormatInfo)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceQueueFamilyProperties2 function as declared in vulkan/vulkan_core.h:4499
func GetPhysicalDeviceQueueFamilyProperties2(PhysicalDevice PhysicalDevice, PQueueFamilyPropertyCount []uint32, PQueueFamilyProperties []QueueFamilyProperties2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPQueueFamilyPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PQueueFamilyPropertyCount)).Data)), cgoAllocsUnknown
	cPQueueFamilyProperties, _ := unpackArgSQueueFamilyProperties2(PQueueFamilyProperties)
	C.vkGetPhysicalDeviceQueueFamilyProperties2(cPhysicalDevice, cPQueueFamilyPropertyCount, cPQueueFamilyProperties)
	packSQueueFamilyProperties2(PQueueFamilyProperties, cPQueueFamilyProperties)
}

// GetPhysicalDeviceMemoryProperties2 function as declared in vulkan/vulkan_core.h:4504
func GetPhysicalDeviceMemoryProperties2(PhysicalDevice PhysicalDevice, PMemoryProperties []PhysicalDeviceMemoryProperties2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPMemoryProperties, _ := unpackArgSPhysicalDeviceMemoryProperties2(PMemoryProperties)
	C.vkGetPhysicalDeviceMemoryProperties2(cPhysicalDevice, cPMemoryProperties)
	packSPhysicalDeviceMemoryProperties2(PMemoryProperties, cPMemoryProperties)
}

// GetPhysicalDeviceSparseImageFormatProperties2 function as declared in vulkan/vulkan_core.h:4508
func GetPhysicalDeviceSparseImageFormatProperties2(PhysicalDevice PhysicalDevice, PFormatInfo []PhysicalDeviceSparseImageFormatInfo2, PPropertyCount []uint32, PProperties []SparseImageFormatProperties2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPFormatInfo, _ := unpackArgSPhysicalDeviceSparseImageFormatInfo2(PFormatInfo)
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSSparseImageFormatProperties2(PProperties)
	C.vkGetPhysicalDeviceSparseImageFormatProperties2(cPhysicalDevice, cPFormatInfo, cPPropertyCount, cPProperties)
	packSSparseImageFormatProperties2(PProperties, cPProperties)
	packSPhysicalDeviceSparseImageFormatInfo2(PFormatInfo, cPFormatInfo)
}

// TrimCommandPool function as declared in vulkan/vulkan_core.h:4514
func TrimCommandPool(Device Device, CommandPool CommandPool, Flags CommandPoolTrimFlags) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cCommandPool, _ := *(*C.VkCommandPool)(unsafe.Pointer(&CommandPool)), cgoAllocsUnknown
	cFlags, _ := (C.VkCommandPoolTrimFlags)(Flags), cgoAllocsUnknown
	C.vkTrimCommandPool(cDevice, cCommandPool, cFlags)
}

// GetDeviceQueue2 function as declared in vulkan/vulkan_core.h:4519
func GetDeviceQueue2(Device Device, PQueueInfo []DeviceQueueInfo2, PQueue []Queue) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPQueueInfo, _ := unpackArgSDeviceQueueInfo2(PQueueInfo)
	cPQueue, _ := (*C.VkQueue)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PQueue)).Data)), cgoAllocsUnknown
	C.vkGetDeviceQueue2(cDevice, cPQueueInfo, cPQueue)
	packSDeviceQueueInfo2(PQueueInfo, cPQueueInfo)
}

// CreateSamplerYcbcrConversion function as declared in vulkan/vulkan_core.h:4524
func CreateSamplerYcbcrConversion(Device Device, PCreateInfo []SamplerYcbcrConversionCreateInfo, PAllocator []AllocationCallbacks, PYcbcrConversion []SamplerYcbcrConversion) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSSamplerYcbcrConversionCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPYcbcrConversion, _ := (*C.VkSamplerYcbcrConversion)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PYcbcrConversion)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateSamplerYcbcrConversion(cDevice, cPCreateInfo, cPAllocator, cPYcbcrConversion)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSSamplerYcbcrConversionCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroySamplerYcbcrConversion function as declared in vulkan/vulkan_core.h:4530
func DestroySamplerYcbcrConversion(Device Device, YcbcrConversion SamplerYcbcrConversion, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cYcbcrConversion, _ := *(*C.VkSamplerYcbcrConversion)(unsafe.Pointer(&YcbcrConversion)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroySamplerYcbcrConversion(cDevice, cYcbcrConversion, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateDescriptorUpdateTemplate function as declared in vulkan/vulkan_core.h:4535
func CreateDescriptorUpdateTemplate(Device Device, PCreateInfo []DescriptorUpdateTemplateCreateInfo, PAllocator []AllocationCallbacks, PDescriptorUpdateTemplate []DescriptorUpdateTemplate) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDescriptorUpdateTemplateCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPDescriptorUpdateTemplate, _ := (*C.VkDescriptorUpdateTemplate)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDescriptorUpdateTemplate)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateDescriptorUpdateTemplate(cDevice, cPCreateInfo, cPAllocator, cPDescriptorUpdateTemplate)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDescriptorUpdateTemplateCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDescriptorUpdateTemplate function as declared in vulkan/vulkan_core.h:4541
func DestroyDescriptorUpdateTemplate(Device Device, DescriptorUpdateTemplate DescriptorUpdateTemplate, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDescriptorUpdateTemplate, _ := *(*C.VkDescriptorUpdateTemplate)(unsafe.Pointer(&DescriptorUpdateTemplate)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDescriptorUpdateTemplate(cDevice, cDescriptorUpdateTemplate, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// UpdateDescriptorSetWithTemplate function as declared in vulkan/vulkan_core.h:4546
func UpdateDescriptorSetWithTemplate(Device Device, DescriptorSet DescriptorSet, DescriptorUpdateTemplate DescriptorUpdateTemplate, PData unsafe.Pointer) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDescriptorSet, _ := *(*C.VkDescriptorSet)(unsafe.Pointer(&DescriptorSet)), cgoAllocsUnknown
	cDescriptorUpdateTemplate, _ := *(*C.VkDescriptorUpdateTemplate)(unsafe.Pointer(&DescriptorUpdateTemplate)), cgoAllocsUnknown
	cPData, _ := PData, cgoAllocsUnknown
	C.vkUpdateDescriptorSetWithTemplate(cDevice, cDescriptorSet, cDescriptorUpdateTemplate, cPData)
}

// GetPhysicalDeviceExternalBufferProperties function as declared in vulkan/vulkan_core.h:4552
func GetPhysicalDeviceExternalBufferProperties(PhysicalDevice PhysicalDevice, PExternalBufferInfo []PhysicalDeviceExternalBufferInfo, PExternalBufferProperties []ExternalBufferProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPExternalBufferInfo, _ := unpackArgSPhysicalDeviceExternalBufferInfo(PExternalBufferInfo)
	cPExternalBufferProperties, _ := unpackArgSExternalBufferProperties(PExternalBufferProperties)
	C.vkGetPhysicalDeviceExternalBufferProperties(cPhysicalDevice, cPExternalBufferInfo, cPExternalBufferProperties)
	packSExternalBufferProperties(PExternalBufferProperties, cPExternalBufferProperties)
	packSPhysicalDeviceExternalBufferInfo(PExternalBufferInfo, cPExternalBufferInfo)
}

// GetPhysicalDeviceExternalFenceProperties function as declared in vulkan/vulkan_core.h:4557
func GetPhysicalDeviceExternalFenceProperties(PhysicalDevice PhysicalDevice, PExternalFenceInfo []PhysicalDeviceExternalFenceInfo, PExternalFenceProperties []ExternalFenceProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPExternalFenceInfo, _ := unpackArgSPhysicalDeviceExternalFenceInfo(PExternalFenceInfo)
	cPExternalFenceProperties, _ := unpackArgSExternalFenceProperties(PExternalFenceProperties)
	C.vkGetPhysicalDeviceExternalFenceProperties(cPhysicalDevice, cPExternalFenceInfo, cPExternalFenceProperties)
	packSExternalFenceProperties(PExternalFenceProperties, cPExternalFenceProperties)
	packSPhysicalDeviceExternalFenceInfo(PExternalFenceInfo, cPExternalFenceInfo)
}

// GetPhysicalDeviceExternalSemaphoreProperties function as declared in vulkan/vulkan_core.h:4562
func GetPhysicalDeviceExternalSemaphoreProperties(PhysicalDevice PhysicalDevice, PExternalSemaphoreInfo []PhysicalDeviceExternalSemaphoreInfo, PExternalSemaphoreProperties []ExternalSemaphoreProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPExternalSemaphoreInfo, _ := unpackArgSPhysicalDeviceExternalSemaphoreInfo(PExternalSemaphoreInfo)
	cPExternalSemaphoreProperties, _ := unpackArgSExternalSemaphoreProperties(PExternalSemaphoreProperties)
	C.vkGetPhysicalDeviceExternalSemaphoreProperties(cPhysicalDevice, cPExternalSemaphoreInfo, cPExternalSemaphoreProperties)
	packSExternalSemaphoreProperties(PExternalSemaphoreProperties, cPExternalSemaphoreProperties)
	packSPhysicalDeviceExternalSemaphoreInfo(PExternalSemaphoreInfo, cPExternalSemaphoreInfo)
}

// GetDescriptorSetLayoutSupport function as declared in vulkan/vulkan_core.h:4567
func GetDescriptorSetLayoutSupport(Device Device, PCreateInfo []DescriptorSetLayoutCreateInfo, PSupport []DescriptorSetLayoutSupport) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDescriptorSetLayoutCreateInfo(PCreateInfo)
	cPSupport, _ := unpackArgSDescriptorSetLayoutSupport(PSupport)
	C.vkGetDescriptorSetLayoutSupport(cDevice, cPCreateInfo, cPSupport)
	packSDescriptorSetLayoutSupport(PSupport, cPSupport)
	packSDescriptorSetLayoutCreateInfo(PCreateInfo, cPCreateInfo)
}

// DestroySurfaceKHR function as declared in vulkan/vulkan_core.h:4666
func DestroySurfaceKHR(Instance Instance, Surface SurfaceKHR, PAllocator []AllocationCallbacks) {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cSurface, _ := *(*C.VkSurfaceKHR)(unsafe.Pointer(&Surface)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroySurfaceKHR(cInstance, cSurface, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetPhysicalDeviceSurfaceSupportKHR function as declared in vulkan/vulkan_core.h:4671
func GetPhysicalDeviceSurfaceSupportKHR(PhysicalDevice PhysicalDevice, QueueFamilyIndex uint32, Surface SurfaceKHR, PSupported []Bool32) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cQueueFamilyIndex, _ := (C.uint32_t)(QueueFamilyIndex), cgoAllocsUnknown
	cSurface, _ := *(*C.VkSurfaceKHR)(unsafe.Pointer(&Surface)), cgoAllocsUnknown
	cPSupported, _ := (*C.VkBool32)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSupported)).Data)), cgoAllocsUnknown
	__ret := C.vkGetPhysicalDeviceSurfaceSupportKHR(cPhysicalDevice, cQueueFamilyIndex, cSurface, cPSupported)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceCapabilitiesKHR function as declared in vulkan/vulkan_core.h:4677
func GetPhysicalDeviceSurfaceCapabilitiesKHR(PhysicalDevice PhysicalDevice, Surface SurfaceKHR, PSurfaceCapabilities []SurfaceCapabilitiesKHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cSurface, _ := *(*C.VkSurfaceKHR)(unsafe.Pointer(&Surface)), cgoAllocsUnknown
	cPSurfaceCapabilities, _ := unpackArgSSurfaceCapabilitiesKHR(PSurfaceCapabilities)
	__ret := C.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(cPhysicalDevice, cSurface, cPSurfaceCapabilities)
	packSSurfaceCapabilitiesKHR(PSurfaceCapabilities, cPSurfaceCapabilities)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceFormatsKHR function as declared in vulkan/vulkan_core.h:4682
func GetPhysicalDeviceSurfaceFormatsKHR(PhysicalDevice PhysicalDevice, Surface SurfaceKHR, PSurfaceFormatCount []uint32, PSurfaceFormats []SurfaceFormatKHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cSurface, _ := *(*C.VkSurfaceKHR)(unsafe.Pointer(&Surface)), cgoAllocsUnknown
	cPSurfaceFormatCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSurfaceFormatCount)).Data)), cgoAllocsUnknown
	cPSurfaceFormats, _ := unpackArgSSurfaceFormatKHR(PSurfaceFormats)
	__ret := C.vkGetPhysicalDeviceSurfaceFormatsKHR(cPhysicalDevice, cSurface, cPSurfaceFormatCount, cPSurfaceFormats)
	packSSurfaceFormatKHR(PSurfaceFormats, cPSurfaceFormats)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfacePresentModesKHR function as declared in vulkan/vulkan_core.h:4688
func GetPhysicalDeviceSurfacePresentModesKHR(PhysicalDevice PhysicalDevice, Surface SurfaceKHR, PPresentModeCount []uint32, PPresentModes []PresentModeKHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cSurface, _ := *(*C.VkSurfaceKHR)(unsafe.Pointer(&Surface)), cgoAllocsUnknown
	cPPresentModeCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPresentModeCount)).Data)), cgoAllocsUnknown
	cPPresentModes, _ := (*C.VkPresentModeKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPresentModes)).Data)), cgoAllocsUnknown
	__ret := C.vkGetPhysicalDeviceSurfacePresentModesKHR(cPhysicalDevice, cSurface, cPPresentModeCount, cPPresentModes)
	__v := (Result)(__ret)
	return __v
}

// CreateSwapchainKHR function as declared in vulkan/vulkan_core.h:4806
func CreateSwapchainKHR(Device Device, PCreateInfo []SwapchainCreateInfoKHR, PAllocator []AllocationCallbacks, PSwapchain []SwapchainKHR) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSSwapchainCreateInfoKHR(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSwapchain, _ := (*C.VkSwapchainKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSwapchain)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateSwapchainKHR(cDevice, cPCreateInfo, cPAllocator, cPSwapchain)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSSwapchainCreateInfoKHR(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroySwapchainKHR function as declared in vulkan/vulkan_core.h:4812
func DestroySwapchainKHR(Device Device, Swapchain SwapchainKHR, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSwapchain, _ := *(*C.VkSwapchainKHR)(unsafe.Pointer(&Swapchain)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroySwapchainKHR(cDevice, cSwapchain, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetSwapchainImagesKHR function as declared in vulkan/vulkan_core.h:4817
func GetSwapchainImagesKHR(Device Device, Swapchain SwapchainKHR, PSwapchainImageCount []uint32, PSwapchainImages []Image) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSwapchain, _ := *(*C.VkSwapchainKHR)(unsafe.Pointer(&Swapchain)), cgoAllocsUnknown
	cPSwapchainImageCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSwapchainImageCount)).Data)), cgoAllocsUnknown
	cPSwapchainImages, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSwapchainImages)).Data)), cgoAllocsUnknown
	__ret := C.vkGetSwapchainImagesKHR(cDevice, cSwapchain, cPSwapchainImageCount, cPSwapchainImages)
	__v := (Result)(__ret)
	return __v
}

// AcquireNextImageKHR function as declared in vulkan/vulkan_core.h:4823
func AcquireNextImageKHR(Device Device, Swapchain SwapchainKHR, Timeout uint64, Semaphore Semaphore, Fence Fence, PImageIndex []uint32) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSwapchain, _ := *(*C.VkSwapchainKHR)(unsafe.Pointer(&Swapchain)), cgoAllocsUnknown
	cTimeout, _ := (C.uint64_t)(Timeout), cgoAllocsUnknown
	cSemaphore, _ := *(*C.VkSemaphore)(unsafe.Pointer(&Semaphore)), cgoAllocsUnknown
	cFence, _ := *(*C.VkFence)(unsafe.Pointer(&Fence)), cgoAllocsUnknown
	cPImageIndex, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PImageIndex)).Data)), cgoAllocsUnknown
	__ret := C.vkAcquireNextImageKHR(cDevice, cSwapchain, cTimeout, cSemaphore, cFence, cPImageIndex)
	__v := (Result)(__ret)
	return __v
}

// QueuePresentKHR function as declared in vulkan/vulkan_core.h:4831
func QueuePresentKHR(Queue Queue, PPresentInfo []PresentInfoKHR) Result {
	cQueue, _ := *(*C.VkQueue)(unsafe.Pointer(&Queue)), cgoAllocsUnknown
	cPPresentInfo, _ := unpackArgSPresentInfoKHR(PPresentInfo)
	__ret := C.vkQueuePresentKHR(cQueue, cPPresentInfo)
	packSPresentInfoKHR(PPresentInfo, cPPresentInfo)
	__v := (Result)(__ret)
	return __v
}

// GetDeviceGroupPresentCapabilitiesKHR function as declared in vulkan/vulkan_core.h:4835
func GetDeviceGroupPresentCapabilitiesKHR(Device Device, PDeviceGroupPresentCapabilities []DeviceGroupPresentCapabilitiesKHR) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPDeviceGroupPresentCapabilities, _ := unpackArgSDeviceGroupPresentCapabilitiesKHR(PDeviceGroupPresentCapabilities)
	__ret := C.vkGetDeviceGroupPresentCapabilitiesKHR(cDevice, cPDeviceGroupPresentCapabilities)
	packSDeviceGroupPresentCapabilitiesKHR(PDeviceGroupPresentCapabilities, cPDeviceGroupPresentCapabilities)
	__v := (Result)(__ret)
	return __v
}

// GetDeviceGroupSurfacePresentModesKHR function as declared in vulkan/vulkan_core.h:4839
func GetDeviceGroupSurfacePresentModesKHR(Device Device, Surface SurfaceKHR, PModes []DeviceGroupPresentModeFlagsKHR) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSurface, _ := *(*C.VkSurfaceKHR)(unsafe.Pointer(&Surface)), cgoAllocsUnknown
	cPModes, _ := (*C.VkDeviceGroupPresentModeFlagsKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PModes)).Data)), cgoAllocsUnknown
	__ret := C.vkGetDeviceGroupSurfacePresentModesKHR(cDevice, cSurface, cPModes)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDevicePresentRectanglesKHR function as declared in vulkan/vulkan_core.h:4844
func GetPhysicalDevicePresentRectanglesKHR(PhysicalDevice PhysicalDevice, Surface SurfaceKHR, PRectCount []uint32, PRects []Rect2D) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cSurface, _ := *(*C.VkSurfaceKHR)(unsafe.Pointer(&Surface)), cgoAllocsUnknown
	cPRectCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PRectCount)).Data)), cgoAllocsUnknown
	cPRects, _ := unpackArgSRect2D(PRects)
	__ret := C.vkGetPhysicalDevicePresentRectanglesKHR(cPhysicalDevice, cSurface, cPRectCount, cPRects)
	packSRect2D(PRects, cPRects)
	__v := (Result)(__ret)
	return __v
}

// AcquireNextImage2KHR function as declared in vulkan/vulkan_core.h:4850
func AcquireNextImage2KHR(Device Device, PAcquireInfo []AcquireNextImageInfoKHR, PImageIndex []uint32) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPAcquireInfo, _ := unpackArgSAcquireNextImageInfoKHR(PAcquireInfo)
	cPImageIndex, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PImageIndex)).Data)), cgoAllocsUnknown
	__ret := C.vkAcquireNextImage2KHR(cDevice, cPAcquireInfo, cPImageIndex)
	packSAcquireNextImageInfoKHR(PAcquireInfo, cPAcquireInfo)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceDisplayPropertiesKHR function as declared in vulkan/vulkan_core.h:4942
func GetPhysicalDeviceDisplayPropertiesKHR(PhysicalDevice PhysicalDevice, PPropertyCount []uint32, PProperties []DisplayPropertiesKHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSDisplayPropertiesKHR(PProperties)
	__ret := C.vkGetPhysicalDeviceDisplayPropertiesKHR(cPhysicalDevice, cPPropertyCount, cPProperties)
	packSDisplayPropertiesKHR(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceDisplayPlanePropertiesKHR function as declared in vulkan/vulkan_core.h:4947
func GetPhysicalDeviceDisplayPlanePropertiesKHR(PhysicalDevice PhysicalDevice, PPropertyCount []uint32, PProperties []DisplayPlanePropertiesKHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSDisplayPlanePropertiesKHR(PProperties)
	__ret := C.vkGetPhysicalDeviceDisplayPlanePropertiesKHR(cPhysicalDevice, cPPropertyCount, cPProperties)
	packSDisplayPlanePropertiesKHR(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayPlaneSupportedDisplaysKHR function as declared in vulkan/vulkan_core.h:4952
func GetDisplayPlaneSupportedDisplaysKHR(PhysicalDevice PhysicalDevice, PlaneIndex uint32, PDisplayCount []uint32, PDisplays []DisplayKHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPlaneIndex, _ := (C.uint32_t)(PlaneIndex), cgoAllocsUnknown
	cPDisplayCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDisplayCount)).Data)), cgoAllocsUnknown
	cPDisplays, _ := (*C.VkDisplayKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDisplays)).Data)), cgoAllocsUnknown
	__ret := C.vkGetDisplayPlaneSupportedDisplaysKHR(cPhysicalDevice, cPlaneIndex, cPDisplayCount, cPDisplays)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayModePropertiesKHR function as declared in vulkan/vulkan_core.h:4958
func GetDisplayModePropertiesKHR(PhysicalDevice PhysicalDevice, Display DisplayKHR, PPropertyCount []uint32, PProperties []DisplayModePropertiesKHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cDisplay, _ := *(*C.VkDisplayKHR)(unsafe.Pointer(&Display)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSDisplayModePropertiesKHR(PProperties)
	__ret := C.vkGetDisplayModePropertiesKHR(cPhysicalDevice, cDisplay, cPPropertyCount, cPProperties)
	packSDisplayModePropertiesKHR(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// CreateDisplayModeKHR function as declared in vulkan/vulkan_core.h:4964
func CreateDisplayModeKHR(PhysicalDevice PhysicalDevice, Display DisplayKHR, PCreateInfo []DisplayModeCreateInfoKHR, PAllocator []AllocationCallbacks, PMode []DisplayModeKHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cDisplay, _ := *(*C.VkDisplayKHR)(unsafe.Pointer(&Display)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDisplayModeCreateInfoKHR(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPMode, _ := (*C.VkDisplayModeKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PMode)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateDisplayModeKHR(cPhysicalDevice, cDisplay, cPCreateInfo, cPAllocator, cPMode)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDisplayModeCreateInfoKHR(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayPlaneCapabilitiesKHR function as declared in vulkan/vulkan_core.h:4971
func GetDisplayPlaneCapabilitiesKHR(PhysicalDevice PhysicalDevice, Mode DisplayModeKHR, PlaneIndex uint32, PCapabilities []DisplayPlaneCapabilitiesKHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cMode, _ := *(*C.VkDisplayModeKHR)(unsafe.Pointer(&Mode)), cgoAllocsUnknown
	cPlaneIndex, _ := (C.uint32_t)(PlaneIndex), cgoAllocsUnknown
	cPCapabilities, _ := unpackArgSDisplayPlaneCapabilitiesKHR(PCapabilities)
	__ret := C.vkGetDisplayPlaneCapabilitiesKHR(cPhysicalDevice, cMode, cPlaneIndex, cPCapabilities)
	packSDisplayPlaneCapabilitiesKHR(PCapabilities, cPCapabilities)
	__v := (Result)(__ret)
	return __v
}

// CreateDisplayPlaneSurfaceKHR function as declared in vulkan/vulkan_core.h:4977
func CreateDisplayPlaneSurfaceKHR(Instance Instance, PCreateInfo []DisplaySurfaceCreateInfoKHR, PAllocator []AllocationCallbacks, PSurface []SurfaceKHR) Result {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDisplaySurfaceCreateInfoKHR(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSurface, _ := (*C.VkSurfaceKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSurface)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateDisplayPlaneSurfaceKHR(cInstance, cPCreateInfo, cPAllocator, cPSurface)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDisplaySurfaceCreateInfoKHR(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// CreateSharedSwapchainsKHR function as declared in vulkan/vulkan_core.h:5000
func CreateSharedSwapchainsKHR(Device Device, SwapchainCount uint32, PCreateInfos []SwapchainCreateInfoKHR, PAllocator []AllocationCallbacks, PSwapchains []SwapchainKHR) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSwapchainCount, _ := (C.uint32_t)(SwapchainCount), cgoAllocsUnknown
	cPCreateInfos, _ := unpackArgSSwapchainCreateInfoKHR(PCreateInfos)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSwapchains, _ := (*C.VkSwapchainKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSwapchains)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateSharedSwapchainsKHR(cDevice, cSwapchainCount, cPCreateInfos, cPAllocator, cPSwapchains)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSSwapchainCreateInfoKHR(PCreateInfos, cPCreateInfos)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceFeatures2KHR function as declared in vulkan/vulkan_core.h:5057
func GetPhysicalDeviceFeatures2KHR(PhysicalDevice PhysicalDevice, PFeatures []PhysicalDeviceFeatures2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPFeatures, _ := unpackArgSPhysicalDeviceFeatures2(PFeatures)
	C.vkGetPhysicalDeviceFeatures2KHR(cPhysicalDevice, cPFeatures)
	packSPhysicalDeviceFeatures2(PFeatures, cPFeatures)
}

// GetPhysicalDeviceProperties2KHR function as declared in vulkan/vulkan_core.h:5061
func GetPhysicalDeviceProperties2KHR(PhysicalDevice PhysicalDevice, PProperties []PhysicalDeviceProperties2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSPhysicalDeviceProperties2(PProperties)
	C.vkGetPhysicalDeviceProperties2KHR(cPhysicalDevice, cPProperties)
	packSPhysicalDeviceProperties2(PProperties, cPProperties)
}

// GetPhysicalDeviceFormatProperties2KHR function as declared in vulkan/vulkan_core.h:5065
func GetPhysicalDeviceFormatProperties2KHR(PhysicalDevice PhysicalDevice, Format Format, PFormatProperties []FormatProperties2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cFormat, _ := (C.VkFormat)(Format), cgoAllocsUnknown
	cPFormatProperties, _ := unpackArgSFormatProperties2(PFormatProperties)
	C.vkGetPhysicalDeviceFormatProperties2KHR(cPhysicalDevice, cFormat, cPFormatProperties)
	packSFormatProperties2(PFormatProperties, cPFormatProperties)
}

// GetPhysicalDeviceImageFormatProperties2KHR function as declared in vulkan/vulkan_core.h:5070
func GetPhysicalDeviceImageFormatProperties2KHR(PhysicalDevice PhysicalDevice, PImageFormatInfo []PhysicalDeviceImageFormatInfo2, PImageFormatProperties []ImageFormatProperties2) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPImageFormatInfo, _ := unpackArgSPhysicalDeviceImageFormatInfo2(PImageFormatInfo)
	cPImageFormatProperties, _ := unpackArgSImageFormatProperties2(PImageFormatProperties)
	__ret := C.vkGetPhysicalDeviceImageFormatProperties2KHR(cPhysicalDevice, cPImageFormatInfo, cPImageFormatProperties)
	packSImageFormatProperties2(PImageFormatProperties, cPImageFormatProperties)
	packSPhysicalDeviceImageFormatInfo2(PImageFormatInfo, cPImageFormatInfo)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceQueueFamilyProperties2KHR function as declared in vulkan/vulkan_core.h:5075
func GetPhysicalDeviceQueueFamilyProperties2KHR(PhysicalDevice PhysicalDevice, PQueueFamilyPropertyCount []uint32, PQueueFamilyProperties []QueueFamilyProperties2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPQueueFamilyPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PQueueFamilyPropertyCount)).Data)), cgoAllocsUnknown
	cPQueueFamilyProperties, _ := unpackArgSQueueFamilyProperties2(PQueueFamilyProperties)
	C.vkGetPhysicalDeviceQueueFamilyProperties2KHR(cPhysicalDevice, cPQueueFamilyPropertyCount, cPQueueFamilyProperties)
	packSQueueFamilyProperties2(PQueueFamilyProperties, cPQueueFamilyProperties)
}

// GetPhysicalDeviceMemoryProperties2KHR function as declared in vulkan/vulkan_core.h:5080
func GetPhysicalDeviceMemoryProperties2KHR(PhysicalDevice PhysicalDevice, PMemoryProperties []PhysicalDeviceMemoryProperties2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPMemoryProperties, _ := unpackArgSPhysicalDeviceMemoryProperties2(PMemoryProperties)
	C.vkGetPhysicalDeviceMemoryProperties2KHR(cPhysicalDevice, cPMemoryProperties)
	packSPhysicalDeviceMemoryProperties2(PMemoryProperties, cPMemoryProperties)
}

// GetPhysicalDeviceSparseImageFormatProperties2KHR function as declared in vulkan/vulkan_core.h:5084
func GetPhysicalDeviceSparseImageFormatProperties2KHR(PhysicalDevice PhysicalDevice, PFormatInfo []PhysicalDeviceSparseImageFormatInfo2, PPropertyCount []uint32, PProperties []SparseImageFormatProperties2) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPFormatInfo, _ := unpackArgSPhysicalDeviceSparseImageFormatInfo2(PFormatInfo)
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSSparseImageFormatProperties2(PProperties)
	C.vkGetPhysicalDeviceSparseImageFormatProperties2KHR(cPhysicalDevice, cPFormatInfo, cPPropertyCount, cPProperties)
	packSSparseImageFormatProperties2(PProperties, cPProperties)
	packSPhysicalDeviceSparseImageFormatInfo2(PFormatInfo, cPFormatInfo)
}

// GetDeviceGroupPeerMemoryFeaturesKHR function as declared in vulkan/vulkan_core.h:5124
func GetDeviceGroupPeerMemoryFeaturesKHR(Device Device, HeapIndex uint32, LocalDeviceIndex uint32, RemoteDeviceIndex uint32, PPeerMemoryFeatures []PeerMemoryFeatureFlags) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cHeapIndex, _ := (C.uint32_t)(HeapIndex), cgoAllocsUnknown
	cLocalDeviceIndex, _ := (C.uint32_t)(LocalDeviceIndex), cgoAllocsUnknown
	cRemoteDeviceIndex, _ := (C.uint32_t)(RemoteDeviceIndex), cgoAllocsUnknown
	cPPeerMemoryFeatures, _ := (*C.VkPeerMemoryFeatureFlags)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPeerMemoryFeatures)).Data)), cgoAllocsUnknown
	C.vkGetDeviceGroupPeerMemoryFeaturesKHR(cDevice, cHeapIndex, cLocalDeviceIndex, cRemoteDeviceIndex, cPPeerMemoryFeatures)
}

// CmdSetDeviceMaskKHR function as declared in vulkan/vulkan_core.h:5131
func CmdSetDeviceMaskKHR(CommandBuffer CommandBuffer, DeviceMask uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cDeviceMask, _ := (C.uint32_t)(DeviceMask), cgoAllocsUnknown
	C.vkCmdSetDeviceMaskKHR(cCommandBuffer, cDeviceMask)
}

// CmdDispatchBaseKHR function as declared in vulkan/vulkan_core.h:5135
func CmdDispatchBaseKHR(CommandBuffer CommandBuffer, BaseGroupX uint32, BaseGroupY uint32, BaseGroupZ uint32, GroupCountX uint32, GroupCountY uint32, GroupCountZ uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBaseGroupX, _ := (C.uint32_t)(BaseGroupX), cgoAllocsUnknown
	cBaseGroupY, _ := (C.uint32_t)(BaseGroupY), cgoAllocsUnknown
	cBaseGroupZ, _ := (C.uint32_t)(BaseGroupZ), cgoAllocsUnknown
	cGroupCountX, _ := (C.uint32_t)(GroupCountX), cgoAllocsUnknown
	cGroupCountY, _ := (C.uint32_t)(GroupCountY), cgoAllocsUnknown
	cGroupCountZ, _ := (C.uint32_t)(GroupCountZ), cgoAllocsUnknown
	C.vkCmdDispatchBaseKHR(cCommandBuffer, cBaseGroupX, cBaseGroupY, cBaseGroupZ, cGroupCountX, cGroupCountY, cGroupCountZ)
}

// TrimCommandPoolKHR function as declared in vulkan/vulkan_core.h:5160
func TrimCommandPoolKHR(Device Device, CommandPool CommandPool, Flags CommandPoolTrimFlags) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cCommandPool, _ := *(*C.VkCommandPool)(unsafe.Pointer(&CommandPool)), cgoAllocsUnknown
	cFlags, _ := (C.VkCommandPoolTrimFlags)(Flags), cgoAllocsUnknown
	C.vkTrimCommandPoolKHR(cDevice, cCommandPool, cFlags)
}

// EnumeratePhysicalDeviceGroupsKHR function as declared in vulkan/vulkan_core.h:5179
func EnumeratePhysicalDeviceGroupsKHR(Instance Instance, PPhysicalDeviceGroupCount []uint32, PPhysicalDeviceGroupProperties []PhysicalDeviceGroupProperties) Result {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cPPhysicalDeviceGroupCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPhysicalDeviceGroupCount)).Data)), cgoAllocsUnknown
	cPPhysicalDeviceGroupProperties, _ := unpackArgSPhysicalDeviceGroupProperties(PPhysicalDeviceGroupProperties)
	__ret := C.vkEnumeratePhysicalDeviceGroupsKHR(cInstance, cPPhysicalDeviceGroupCount, cPPhysicalDeviceGroupProperties)
	packSPhysicalDeviceGroupProperties(PPhysicalDeviceGroupProperties, cPPhysicalDeviceGroupProperties)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceExternalBufferPropertiesKHR function as declared in vulkan/vulkan_core.h:5215
func GetPhysicalDeviceExternalBufferPropertiesKHR(PhysicalDevice PhysicalDevice, PExternalBufferInfo []PhysicalDeviceExternalBufferInfo, PExternalBufferProperties []ExternalBufferProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPExternalBufferInfo, _ := unpackArgSPhysicalDeviceExternalBufferInfo(PExternalBufferInfo)
	cPExternalBufferProperties, _ := unpackArgSExternalBufferProperties(PExternalBufferProperties)
	C.vkGetPhysicalDeviceExternalBufferPropertiesKHR(cPhysicalDevice, cPExternalBufferInfo, cPExternalBufferProperties)
	packSExternalBufferProperties(PExternalBufferProperties, cPExternalBufferProperties)
	packSPhysicalDeviceExternalBufferInfo(PExternalBufferInfo, cPExternalBufferInfo)
}

// GetMemoryFdKHR function as declared in vulkan/vulkan_core.h:5263
func GetMemoryFdKHR(Device Device, PGetFdInfo []MemoryGetFdInfoKHR, PFd []int32) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPGetFdInfo, _ := unpackArgSMemoryGetFdInfoKHR(PGetFdInfo)
	cPFd, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PFd)).Data)), cgoAllocsUnknown
	__ret := C.vkGetMemoryFdKHR(cDevice, cPGetFdInfo, cPFd)
	packSMemoryGetFdInfoKHR(PGetFdInfo, cPGetFdInfo)
	__v := (Result)(__ret)
	return __v
}

// GetMemoryFdPropertiesKHR function as declared in vulkan/vulkan_core.h:5268
func GetMemoryFdPropertiesKHR(Device Device, HandleType ExternalMemoryHandleTypeFlagBits, Fd int32, PMemoryFdProperties []MemoryFdPropertiesKHR) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cHandleType, _ := (C.VkExternalMemoryHandleTypeFlagBits)(HandleType), cgoAllocsUnknown
	cFd, _ := (C.int)(Fd), cgoAllocsUnknown
	cPMemoryFdProperties, _ := unpackArgSMemoryFdPropertiesKHR(PMemoryFdProperties)
	__ret := C.vkGetMemoryFdPropertiesKHR(cDevice, cHandleType, cFd, cPMemoryFdProperties)
	packSMemoryFdPropertiesKHR(PMemoryFdProperties, cPMemoryFdProperties)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceExternalSemaphorePropertiesKHR function as declared in vulkan/vulkan_core.h:5296
func GetPhysicalDeviceExternalSemaphorePropertiesKHR(PhysicalDevice PhysicalDevice, PExternalSemaphoreInfo []PhysicalDeviceExternalSemaphoreInfo, PExternalSemaphoreProperties []ExternalSemaphoreProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPExternalSemaphoreInfo, _ := unpackArgSPhysicalDeviceExternalSemaphoreInfo(PExternalSemaphoreInfo)
	cPExternalSemaphoreProperties, _ := unpackArgSExternalSemaphoreProperties(PExternalSemaphoreProperties)
	C.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(cPhysicalDevice, cPExternalSemaphoreInfo, cPExternalSemaphoreProperties)
	packSExternalSemaphoreProperties(PExternalSemaphoreProperties, cPExternalSemaphoreProperties)
	packSPhysicalDeviceExternalSemaphoreInfo(PExternalSemaphoreInfo, cPExternalSemaphoreInfo)
}

// ImportSemaphoreFdKHR function as declared in vulkan/vulkan_core.h:5340
func ImportSemaphoreFdKHR(Device Device, PImportSemaphoreFdInfo []ImportSemaphoreFdInfoKHR) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPImportSemaphoreFdInfo, _ := unpackArgSImportSemaphoreFdInfoKHR(PImportSemaphoreFdInfo)
	__ret := C.vkImportSemaphoreFdKHR(cDevice, cPImportSemaphoreFdInfo)
	packSImportSemaphoreFdInfoKHR(PImportSemaphoreFdInfo, cPImportSemaphoreFdInfo)
	__v := (Result)(__ret)
	return __v
}

// GetSemaphoreFdKHR function as declared in vulkan/vulkan_core.h:5344
func GetSemaphoreFdKHR(Device Device, PGetFdInfo []SemaphoreGetFdInfoKHR, PFd []int32) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPGetFdInfo, _ := unpackArgSSemaphoreGetFdInfoKHR(PGetFdInfo)
	cPFd, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PFd)).Data)), cgoAllocsUnknown
	__ret := C.vkGetSemaphoreFdKHR(cDevice, cPGetFdInfo, cPFd)
	packSSemaphoreGetFdInfoKHR(PGetFdInfo, cPGetFdInfo)
	__v := (Result)(__ret)
	return __v
}

// CmdPushDescriptorSetKHR function as declared in vulkan/vulkan_core.h:5365
func CmdPushDescriptorSetKHR(CommandBuffer CommandBuffer, PipelineBindPoint PipelineBindPoint, Layout PipelineLayout, Set uint32, DescriptorWriteCount uint32, PDescriptorWrites []WriteDescriptorSet) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPipelineBindPoint, _ := (C.VkPipelineBindPoint)(PipelineBindPoint), cgoAllocsUnknown
	cLayout, _ := *(*C.VkPipelineLayout)(unsafe.Pointer(&Layout)), cgoAllocsUnknown
	cSet, _ := (C.uint32_t)(Set), cgoAllocsUnknown
	cDescriptorWriteCount, _ := (C.uint32_t)(DescriptorWriteCount), cgoAllocsUnknown
	cPDescriptorWrites, _ := unpackArgSWriteDescriptorSet(PDescriptorWrites)
	C.vkCmdPushDescriptorSetKHR(cCommandBuffer, cPipelineBindPoint, cLayout, cSet, cDescriptorWriteCount, cPDescriptorWrites)
	packSWriteDescriptorSet(PDescriptorWrites, cPDescriptorWrites)
}

// CmdPushDescriptorSetWithTemplateKHR function as declared in vulkan/vulkan_core.h:5373
func CmdPushDescriptorSetWithTemplateKHR(CommandBuffer CommandBuffer, DescriptorUpdateTemplate DescriptorUpdateTemplate, Layout PipelineLayout, Set uint32, PData unsafe.Pointer) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cDescriptorUpdateTemplate, _ := *(*C.VkDescriptorUpdateTemplate)(unsafe.Pointer(&DescriptorUpdateTemplate)), cgoAllocsUnknown
	cLayout, _ := *(*C.VkPipelineLayout)(unsafe.Pointer(&Layout)), cgoAllocsUnknown
	cSet, _ := (C.uint32_t)(Set), cgoAllocsUnknown
	cPData, _ := PData, cgoAllocsUnknown
	C.vkCmdPushDescriptorSetWithTemplateKHR(cCommandBuffer, cDescriptorUpdateTemplate, cLayout, cSet, cPData)
}

// CreateDescriptorUpdateTemplateKHR function as declared in vulkan/vulkan_core.h:5436
func CreateDescriptorUpdateTemplateKHR(Device Device, PCreateInfo []DescriptorUpdateTemplateCreateInfo, PAllocator []AllocationCallbacks, PDescriptorUpdateTemplate []DescriptorUpdateTemplate) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDescriptorUpdateTemplateCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPDescriptorUpdateTemplate, _ := (*C.VkDescriptorUpdateTemplate)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDescriptorUpdateTemplate)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateDescriptorUpdateTemplateKHR(cDevice, cPCreateInfo, cPAllocator, cPDescriptorUpdateTemplate)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDescriptorUpdateTemplateCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDescriptorUpdateTemplateKHR function as declared in vulkan/vulkan_core.h:5442
func DestroyDescriptorUpdateTemplateKHR(Device Device, DescriptorUpdateTemplate DescriptorUpdateTemplate, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDescriptorUpdateTemplate, _ := *(*C.VkDescriptorUpdateTemplate)(unsafe.Pointer(&DescriptorUpdateTemplate)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDescriptorUpdateTemplateKHR(cDevice, cDescriptorUpdateTemplate, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// UpdateDescriptorSetWithTemplateKHR function as declared in vulkan/vulkan_core.h:5447
func UpdateDescriptorSetWithTemplateKHR(Device Device, DescriptorSet DescriptorSet, DescriptorUpdateTemplate DescriptorUpdateTemplate, PData unsafe.Pointer) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDescriptorSet, _ := *(*C.VkDescriptorSet)(unsafe.Pointer(&DescriptorSet)), cgoAllocsUnknown
	cDescriptorUpdateTemplate, _ := *(*C.VkDescriptorUpdateTemplate)(unsafe.Pointer(&DescriptorUpdateTemplate)), cgoAllocsUnknown
	cPData, _ := PData, cgoAllocsUnknown
	C.vkUpdateDescriptorSetWithTemplateKHR(cDevice, cDescriptorSet, cDescriptorUpdateTemplate, cPData)
}

// CreateRenderPass2KHR function as declared in vulkan/vulkan_core.h:5541
func CreateRenderPass2KHR(Device Device, PCreateInfo []RenderPassCreateInfo2KHR, PAllocator []AllocationCallbacks, PRenderPass []RenderPass) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSRenderPassCreateInfo2KHR(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPRenderPass, _ := (*C.VkRenderPass)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PRenderPass)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateRenderPass2KHR(cDevice, cPCreateInfo, cPAllocator, cPRenderPass)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSRenderPassCreateInfo2KHR(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// CmdBeginRenderPass2KHR function as declared in vulkan/vulkan_core.h:5547
func CmdBeginRenderPass2KHR(CommandBuffer CommandBuffer, PRenderPassBegin []RenderPassBeginInfo, PSubpassBeginInfo []SubpassBeginInfoKHR) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPRenderPassBegin, _ := unpackArgSRenderPassBeginInfo(PRenderPassBegin)
	cPSubpassBeginInfo, _ := unpackArgSSubpassBeginInfoKHR(PSubpassBeginInfo)
	C.vkCmdBeginRenderPass2KHR(cCommandBuffer, cPRenderPassBegin, cPSubpassBeginInfo)
	packSSubpassBeginInfoKHR(PSubpassBeginInfo, cPSubpassBeginInfo)
	packSRenderPassBeginInfo(PRenderPassBegin, cPRenderPassBegin)
}

// CmdNextSubpass2KHR function as declared in vulkan/vulkan_core.h:5552
func CmdNextSubpass2KHR(CommandBuffer CommandBuffer, PSubpassBeginInfo []SubpassBeginInfoKHR, PSubpassEndInfo []SubpassEndInfoKHR) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPSubpassBeginInfo, _ := unpackArgSSubpassBeginInfoKHR(PSubpassBeginInfo)
	cPSubpassEndInfo, _ := unpackArgSSubpassEndInfoKHR(PSubpassEndInfo)
	C.vkCmdNextSubpass2KHR(cCommandBuffer, cPSubpassBeginInfo, cPSubpassEndInfo)
	packSSubpassEndInfoKHR(PSubpassEndInfo, cPSubpassEndInfo)
	packSSubpassBeginInfoKHR(PSubpassBeginInfo, cPSubpassBeginInfo)
}

// CmdEndRenderPass2KHR function as declared in vulkan/vulkan_core.h:5557
func CmdEndRenderPass2KHR(CommandBuffer CommandBuffer, PSubpassEndInfo []SubpassEndInfoKHR) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPSubpassEndInfo, _ := unpackArgSSubpassEndInfoKHR(PSubpassEndInfo)
	C.vkCmdEndRenderPass2KHR(cCommandBuffer, cPSubpassEndInfo)
	packSSubpassEndInfoKHR(PSubpassEndInfo, cPSubpassEndInfo)
}

// GetSwapchainStatusKHR function as declared in vulkan/vulkan_core.h:5576
func GetSwapchainStatusKHR(Device Device, Swapchain SwapchainKHR) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSwapchain, _ := *(*C.VkSwapchainKHR)(unsafe.Pointer(&Swapchain)), cgoAllocsUnknown
	__ret := C.vkGetSwapchainStatusKHR(cDevice, cSwapchain)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceExternalFencePropertiesKHR function as declared in vulkan/vulkan_core.h:5602
func GetPhysicalDeviceExternalFencePropertiesKHR(PhysicalDevice PhysicalDevice, PExternalFenceInfo []PhysicalDeviceExternalFenceInfo, PExternalFenceProperties []ExternalFenceProperties) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPExternalFenceInfo, _ := unpackArgSPhysicalDeviceExternalFenceInfo(PExternalFenceInfo)
	cPExternalFenceProperties, _ := unpackArgSExternalFenceProperties(PExternalFenceProperties)
	C.vkGetPhysicalDeviceExternalFencePropertiesKHR(cPhysicalDevice, cPExternalFenceInfo, cPExternalFenceProperties)
	packSExternalFenceProperties(PExternalFenceProperties, cPExternalFenceProperties)
	packSPhysicalDeviceExternalFenceInfo(PExternalFenceInfo, cPExternalFenceInfo)
}

// ImportFenceFdKHR function as declared in vulkan/vulkan_core.h:5646
func ImportFenceFdKHR(Device Device, PImportFenceFdInfo []ImportFenceFdInfoKHR) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPImportFenceFdInfo, _ := unpackArgSImportFenceFdInfoKHR(PImportFenceFdInfo)
	__ret := C.vkImportFenceFdKHR(cDevice, cPImportFenceFdInfo)
	packSImportFenceFdInfoKHR(PImportFenceFdInfo, cPImportFenceFdInfo)
	__v := (Result)(__ret)
	return __v
}

// GetFenceFdKHR function as declared in vulkan/vulkan_core.h:5650
func GetFenceFdKHR(Device Device, PGetFdInfo []FenceGetFdInfoKHR, PFd []int32) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPGetFdInfo, _ := unpackArgSFenceGetFdInfoKHR(PGetFdInfo)
	cPFd, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PFd)).Data)), cgoAllocsUnknown
	__ret := C.vkGetFenceFdKHR(cDevice, cPGetFdInfo, cPFd)
	packSFenceGetFdInfoKHR(PGetFdInfo, cPGetFdInfo)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceCapabilities2KHR function as declared in vulkan/vulkan_core.h:5704
func GetPhysicalDeviceSurfaceCapabilities2KHR(PhysicalDevice PhysicalDevice, PSurfaceInfo []PhysicalDeviceSurfaceInfo2KHR, PSurfaceCapabilities []SurfaceCapabilities2KHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPSurfaceInfo, _ := unpackArgSPhysicalDeviceSurfaceInfo2KHR(PSurfaceInfo)
	cPSurfaceCapabilities, _ := unpackArgSSurfaceCapabilities2KHR(PSurfaceCapabilities)
	__ret := C.vkGetPhysicalDeviceSurfaceCapabilities2KHR(cPhysicalDevice, cPSurfaceInfo, cPSurfaceCapabilities)
	packSSurfaceCapabilities2KHR(PSurfaceCapabilities, cPSurfaceCapabilities)
	packSPhysicalDeviceSurfaceInfo2KHR(PSurfaceInfo, cPSurfaceInfo)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceFormats2KHR function as declared in vulkan/vulkan_core.h:5709
func GetPhysicalDeviceSurfaceFormats2KHR(PhysicalDevice PhysicalDevice, PSurfaceInfo []PhysicalDeviceSurfaceInfo2KHR, PSurfaceFormatCount []uint32, PSurfaceFormats []SurfaceFormat2KHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPSurfaceInfo, _ := unpackArgSPhysicalDeviceSurfaceInfo2KHR(PSurfaceInfo)
	cPSurfaceFormatCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSurfaceFormatCount)).Data)), cgoAllocsUnknown
	cPSurfaceFormats, _ := unpackArgSSurfaceFormat2KHR(PSurfaceFormats)
	__ret := C.vkGetPhysicalDeviceSurfaceFormats2KHR(cPhysicalDevice, cPSurfaceInfo, cPSurfaceFormatCount, cPSurfaceFormats)
	packSSurfaceFormat2KHR(PSurfaceFormats, cPSurfaceFormats)
	packSPhysicalDeviceSurfaceInfo2KHR(PSurfaceInfo, cPSurfaceInfo)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceDisplayProperties2KHR function as declared in vulkan/vulkan_core.h:5766
func GetPhysicalDeviceDisplayProperties2KHR(PhysicalDevice PhysicalDevice, PPropertyCount []uint32, PProperties []DisplayProperties2KHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSDisplayProperties2KHR(PProperties)
	__ret := C.vkGetPhysicalDeviceDisplayProperties2KHR(cPhysicalDevice, cPPropertyCount, cPProperties)
	packSDisplayProperties2KHR(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceDisplayPlaneProperties2KHR function as declared in vulkan/vulkan_core.h:5771
func GetPhysicalDeviceDisplayPlaneProperties2KHR(PhysicalDevice PhysicalDevice, PPropertyCount []uint32, PProperties []DisplayPlaneProperties2KHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSDisplayPlaneProperties2KHR(PProperties)
	__ret := C.vkGetPhysicalDeviceDisplayPlaneProperties2KHR(cPhysicalDevice, cPPropertyCount, cPProperties)
	packSDisplayPlaneProperties2KHR(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayModeProperties2KHR function as declared in vulkan/vulkan_core.h:5776
func GetDisplayModeProperties2KHR(PhysicalDevice PhysicalDevice, Display DisplayKHR, PPropertyCount []uint32, PProperties []DisplayModeProperties2KHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cDisplay, _ := *(*C.VkDisplayKHR)(unsafe.Pointer(&Display)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSDisplayModeProperties2KHR(PProperties)
	__ret := C.vkGetDisplayModeProperties2KHR(cPhysicalDevice, cDisplay, cPPropertyCount, cPProperties)
	packSDisplayModeProperties2KHR(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayPlaneCapabilities2KHR function as declared in vulkan/vulkan_core.h:5782
func GetDisplayPlaneCapabilities2KHR(PhysicalDevice PhysicalDevice, PDisplayPlaneInfo []DisplayPlaneInfo2KHR, PCapabilities []DisplayPlaneCapabilities2KHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPDisplayPlaneInfo, _ := unpackArgSDisplayPlaneInfo2KHR(PDisplayPlaneInfo)
	cPCapabilities, _ := unpackArgSDisplayPlaneCapabilities2KHR(PCapabilities)
	__ret := C.vkGetDisplayPlaneCapabilities2KHR(cPhysicalDevice, cPDisplayPlaneInfo, cPCapabilities)
	packSDisplayPlaneCapabilities2KHR(PCapabilities, cPCapabilities)
	packSDisplayPlaneInfo2KHR(PDisplayPlaneInfo, cPDisplayPlaneInfo)
	__v := (Result)(__ret)
	return __v
}

// GetImageMemoryRequirements2KHR function as declared in vulkan/vulkan_core.h:5828
func GetImageMemoryRequirements2KHR(Device Device, PInfo []ImageMemoryRequirementsInfo2, PMemoryRequirements []MemoryRequirements2) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPInfo, _ := unpackArgSImageMemoryRequirementsInfo2(PInfo)
	cPMemoryRequirements, _ := unpackArgSMemoryRequirements2(PMemoryRequirements)
	C.vkGetImageMemoryRequirements2KHR(cDevice, cPInfo, cPMemoryRequirements)
	packSMemoryRequirements2(PMemoryRequirements, cPMemoryRequirements)
	packSImageMemoryRequirementsInfo2(PInfo, cPInfo)
}

// GetBufferMemoryRequirements2KHR function as declared in vulkan/vulkan_core.h:5833
func GetBufferMemoryRequirements2KHR(Device Device, PInfo []BufferMemoryRequirementsInfo2, PMemoryRequirements []MemoryRequirements2) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPInfo, _ := unpackArgSBufferMemoryRequirementsInfo2(PInfo)
	cPMemoryRequirements, _ := unpackArgSMemoryRequirements2(PMemoryRequirements)
	C.vkGetBufferMemoryRequirements2KHR(cDevice, cPInfo, cPMemoryRequirements)
	packSMemoryRequirements2(PMemoryRequirements, cPMemoryRequirements)
	packSBufferMemoryRequirementsInfo2(PInfo, cPInfo)
}

// GetImageSparseMemoryRequirements2KHR function as declared in vulkan/vulkan_core.h:5838
func GetImageSparseMemoryRequirements2KHR(Device Device, PInfo []ImageSparseMemoryRequirementsInfo2, PSparseMemoryRequirementCount []uint32, PSparseMemoryRequirements []SparseImageMemoryRequirements2) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPInfo, _ := unpackArgSImageSparseMemoryRequirementsInfo2(PInfo)
	cPSparseMemoryRequirementCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSparseMemoryRequirementCount)).Data)), cgoAllocsUnknown
	cPSparseMemoryRequirements, _ := unpackArgSSparseImageMemoryRequirements2(PSparseMemoryRequirements)
	C.vkGetImageSparseMemoryRequirements2KHR(cDevice, cPInfo, cPSparseMemoryRequirementCount, cPSparseMemoryRequirements)
	packSSparseImageMemoryRequirements2(PSparseMemoryRequirements, cPSparseMemoryRequirements)
	packSImageSparseMemoryRequirementsInfo2(PInfo, cPInfo)
}

// CreateSamplerYcbcrConversionKHR function as declared in vulkan/vulkan_core.h:5889
func CreateSamplerYcbcrConversionKHR(Device Device, PCreateInfo []SamplerYcbcrConversionCreateInfo, PAllocator []AllocationCallbacks, PYcbcrConversion []SamplerYcbcrConversion) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSSamplerYcbcrConversionCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPYcbcrConversion, _ := (*C.VkSamplerYcbcrConversion)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PYcbcrConversion)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateSamplerYcbcrConversionKHR(cDevice, cPCreateInfo, cPAllocator, cPYcbcrConversion)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSSamplerYcbcrConversionCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroySamplerYcbcrConversionKHR function as declared in vulkan/vulkan_core.h:5895
func DestroySamplerYcbcrConversionKHR(Device Device, YcbcrConversion SamplerYcbcrConversion, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cYcbcrConversion, _ := *(*C.VkSamplerYcbcrConversion)(unsafe.Pointer(&YcbcrConversion)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroySamplerYcbcrConversionKHR(cDevice, cYcbcrConversion, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// BindBufferMemory2KHR function as declared in vulkan/vulkan_core.h:5914
func BindBufferMemory2KHR(Device Device, BindInfoCount uint32, PBindInfos []BindBufferMemoryInfo) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cBindInfoCount, _ := (C.uint32_t)(BindInfoCount), cgoAllocsUnknown
	cPBindInfos, _ := unpackArgSBindBufferMemoryInfo(PBindInfos)
	__ret := C.vkBindBufferMemory2KHR(cDevice, cBindInfoCount, cPBindInfos)
	packSBindBufferMemoryInfo(PBindInfos, cPBindInfos)
	__v := (Result)(__ret)
	return __v
}

// BindImageMemory2KHR function as declared in vulkan/vulkan_core.h:5919
func BindImageMemory2KHR(Device Device, BindInfoCount uint32, PBindInfos []BindImageMemoryInfo) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cBindInfoCount, _ := (C.uint32_t)(BindInfoCount), cgoAllocsUnknown
	cPBindInfos, _ := unpackArgSBindImageMemoryInfo(PBindInfos)
	__ret := C.vkBindImageMemory2KHR(cDevice, cBindInfoCount, cPBindInfos)
	packSBindImageMemoryInfo(PBindInfos, cPBindInfos)
	__v := (Result)(__ret)
	return __v
}

// GetDescriptorSetLayoutSupportKHR function as declared in vulkan/vulkan_core.h:5937
func GetDescriptorSetLayoutSupportKHR(Device Device, PCreateInfo []DescriptorSetLayoutCreateInfo, PSupport []DescriptorSetLayoutSupport) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDescriptorSetLayoutCreateInfo(PCreateInfo)
	cPSupport, _ := unpackArgSDescriptorSetLayoutSupport(PSupport)
	C.vkGetDescriptorSetLayoutSupportKHR(cDevice, cPCreateInfo, cPSupport)
	packSDescriptorSetLayoutSupport(PSupport, cPSupport)
	packSDescriptorSetLayoutCreateInfo(PCreateInfo, cPCreateInfo)
}

// CmdDrawIndirectCountKHR function as declared in vulkan/vulkan_core.h:5951
func CmdDrawIndirectCountKHR(CommandBuffer CommandBuffer, Buffer Buffer, Offset DeviceSize, CountBuffer Buffer, CountBufferOffset DeviceSize, MaxDrawCount uint32, Stride uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cCountBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&CountBuffer)), cgoAllocsUnknown
	cCountBufferOffset, _ := (C.VkDeviceSize)(CountBufferOffset), cgoAllocsUnknown
	cMaxDrawCount, _ := (C.uint32_t)(MaxDrawCount), cgoAllocsUnknown
	cStride, _ := (C.uint32_t)(Stride), cgoAllocsUnknown
	C.vkCmdDrawIndirectCountKHR(cCommandBuffer, cBuffer, cOffset, cCountBuffer, cCountBufferOffset, cMaxDrawCount, cStride)
}

// CmdDrawIndexedIndirectCountKHR function as declared in vulkan/vulkan_core.h:5960
func CmdDrawIndexedIndirectCountKHR(CommandBuffer CommandBuffer, Buffer Buffer, Offset DeviceSize, CountBuffer Buffer, CountBufferOffset DeviceSize, MaxDrawCount uint32, Stride uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cCountBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&CountBuffer)), cgoAllocsUnknown
	cCountBufferOffset, _ := (C.VkDeviceSize)(CountBufferOffset), cgoAllocsUnknown
	cMaxDrawCount, _ := (C.uint32_t)(MaxDrawCount), cgoAllocsUnknown
	cStride, _ := (C.uint32_t)(Stride), cgoAllocsUnknown
	C.vkCmdDrawIndexedIndirectCountKHR(cCommandBuffer, cBuffer, cOffset, cCountBuffer, cCountBufferOffset, cMaxDrawCount, cStride)
}

// CreateDebugReportCallbackEXT function as declared in vulkan/vulkan_core.h:6073
func CreateDebugReportCallbackEXT(Instance Instance, PCreateInfo []DebugReportCallbackCreateInfoEXT, PAllocator []AllocationCallbacks, PCallback []DebugReportCallbackEXT) Result {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDebugReportCallbackCreateInfoEXT(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPCallback, _ := (*C.VkDebugReportCallbackEXT)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PCallback)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateDebugReportCallbackEXT(cInstance, cPCreateInfo, cPAllocator, cPCallback)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDebugReportCallbackCreateInfoEXT(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDebugReportCallbackEXT function as declared in vulkan/vulkan_core.h:6079
func DestroyDebugReportCallbackEXT(Instance Instance, Callback DebugReportCallbackEXT, PAllocator []AllocationCallbacks) {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cCallback, _ := *(*C.VkDebugReportCallbackEXT)(unsafe.Pointer(&Callback)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDebugReportCallbackEXT(cInstance, cCallback, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// DebugReportMessageEXT function as declared in vulkan/vulkan_core.h:6084
func DebugReportMessageEXT(Instance Instance, Flags DebugReportFlagsEXT, ObjectType DebugReportObjectTypeEXT, Object uint64, Location uint, MessageCode int32, PLayerPrefix string, PMessage string) {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cFlags, _ := (C.VkDebugReportFlagsEXT)(Flags), cgoAllocsUnknown
	cObjectType, _ := (C.VkDebugReportObjectTypeEXT)(ObjectType), cgoAllocsUnknown
	cObject, _ := (C.uint64_t)(Object), cgoAllocsUnknown
	cLocation, _ := (C.size_t)(Location), cgoAllocsUnknown
	cMessageCode, _ := (C.int32_t)(MessageCode), cgoAllocsUnknown
	cPLayerPrefix, _ := unpackPCharString(PLayerPrefix)
	cPMessage, _ := unpackPCharString(PMessage)
	C.vkDebugReportMessageEXT(cInstance, cFlags, cObjectType, cObject, cLocation, cMessageCode, cPLayerPrefix, cPMessage)
}

// DebugMarkerSetObjectTagEXT function as declared in vulkan/vulkan_core.h:6179
func DebugMarkerSetObjectTagEXT(Device Device, PTagInfo []DebugMarkerObjectTagInfoEXT) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPTagInfo, _ := unpackArgSDebugMarkerObjectTagInfoEXT(PTagInfo)
	__ret := C.vkDebugMarkerSetObjectTagEXT(cDevice, cPTagInfo)
	packSDebugMarkerObjectTagInfoEXT(PTagInfo, cPTagInfo)
	__v := (Result)(__ret)
	return __v
}

// DebugMarkerSetObjectNameEXT function as declared in vulkan/vulkan_core.h:6183
func DebugMarkerSetObjectNameEXT(Device Device, PNameInfo []DebugMarkerObjectNameInfoEXT) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPNameInfo, _ := unpackArgSDebugMarkerObjectNameInfoEXT(PNameInfo)
	__ret := C.vkDebugMarkerSetObjectNameEXT(cDevice, cPNameInfo)
	packSDebugMarkerObjectNameInfoEXT(PNameInfo, cPNameInfo)
	__v := (Result)(__ret)
	return __v
}

// CmdDebugMarkerBeginEXT function as declared in vulkan/vulkan_core.h:6187
func CmdDebugMarkerBeginEXT(CommandBuffer CommandBuffer, PMarkerInfo []DebugMarkerMarkerInfoEXT) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPMarkerInfo, _ := unpackArgSDebugMarkerMarkerInfoEXT(PMarkerInfo)
	C.vkCmdDebugMarkerBeginEXT(cCommandBuffer, cPMarkerInfo)
	packSDebugMarkerMarkerInfoEXT(PMarkerInfo, cPMarkerInfo)
}

// CmdDebugMarkerEndEXT function as declared in vulkan/vulkan_core.h:6191
func CmdDebugMarkerEndEXT(CommandBuffer CommandBuffer) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	C.vkCmdDebugMarkerEndEXT(cCommandBuffer)
}

// CmdDebugMarkerInsertEXT function as declared in vulkan/vulkan_core.h:6194
func CmdDebugMarkerInsertEXT(CommandBuffer CommandBuffer, PMarkerInfo []DebugMarkerMarkerInfoEXT) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPMarkerInfo, _ := unpackArgSDebugMarkerMarkerInfoEXT(PMarkerInfo)
	C.vkCmdDebugMarkerInsertEXT(cCommandBuffer, cPMarkerInfo)
	packSDebugMarkerMarkerInfoEXT(PMarkerInfo, cPMarkerInfo)
}

// CmdDrawIndirectCountAMD function as declared in vulkan/vulkan_core.h:6237
func CmdDrawIndirectCountAMD(CommandBuffer CommandBuffer, Buffer Buffer, Offset DeviceSize, CountBuffer Buffer, CountBufferOffset DeviceSize, MaxDrawCount uint32, Stride uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cCountBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&CountBuffer)), cgoAllocsUnknown
	cCountBufferOffset, _ := (C.VkDeviceSize)(CountBufferOffset), cgoAllocsUnknown
	cMaxDrawCount, _ := (C.uint32_t)(MaxDrawCount), cgoAllocsUnknown
	cStride, _ := (C.uint32_t)(Stride), cgoAllocsUnknown
	C.vkCmdDrawIndirectCountAMD(cCommandBuffer, cBuffer, cOffset, cCountBuffer, cCountBufferOffset, cMaxDrawCount, cStride)
}

// CmdDrawIndexedIndirectCountAMD function as declared in vulkan/vulkan_core.h:6246
func CmdDrawIndexedIndirectCountAMD(CommandBuffer CommandBuffer, Buffer Buffer, Offset DeviceSize, CountBuffer Buffer, CountBufferOffset DeviceSize, MaxDrawCount uint32, Stride uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&Buffer)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cCountBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&CountBuffer)), cgoAllocsUnknown
	cCountBufferOffset, _ := (C.VkDeviceSize)(CountBufferOffset), cgoAllocsUnknown
	cMaxDrawCount, _ := (C.uint32_t)(MaxDrawCount), cgoAllocsUnknown
	cStride, _ := (C.uint32_t)(Stride), cgoAllocsUnknown
	C.vkCmdDrawIndexedIndirectCountAMD(cCommandBuffer, cBuffer, cOffset, cCountBuffer, cCountBufferOffset, cMaxDrawCount, cStride)
}

// GetShaderInfoAMD function as declared in vulkan/vulkan_core.h:6320
func GetShaderInfoAMD(Device Device, Pipeline Pipeline, ShaderStage ShaderStageFlagBits, InfoType ShaderInfoTypeAMD, PInfoSize []uint, PInfo unsafe.Pointer) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPipeline, _ := *(*C.VkPipeline)(unsafe.Pointer(&Pipeline)), cgoAllocsUnknown
	cShaderStage, _ := (C.VkShaderStageFlagBits)(ShaderStage), cgoAllocsUnknown
	cInfoType, _ := (C.VkShaderInfoTypeAMD)(InfoType), cgoAllocsUnknown
	cPInfoSize, _ := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PInfoSize)).Data)), cgoAllocsUnknown
	cPInfo, _ := PInfo, cgoAllocsUnknown
	__ret := C.vkGetShaderInfoAMD(cDevice, cPipeline, cShaderStage, cInfoType, cPInfoSize, cPInfo)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceExternalImageFormatPropertiesNV function as declared in vulkan/vulkan_core.h:6372
func GetPhysicalDeviceExternalImageFormatPropertiesNV(PhysicalDevice PhysicalDevice, Format Format, _type ImageType, Tiling ImageTiling, Usage ImageUsageFlags, Flags ImageCreateFlags, ExternalHandleType ExternalMemoryHandleTypeFlagsNV, PExternalImageFormatProperties []ExternalImageFormatPropertiesNV) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cFormat, _ := (C.VkFormat)(Format), cgoAllocsUnknown
	c_type, _ := (C.VkImageType)(_type), cgoAllocsUnknown
	cTiling, _ := (C.VkImageTiling)(Tiling), cgoAllocsUnknown
	cUsage, _ := (C.VkImageUsageFlags)(Usage), cgoAllocsUnknown
	cFlags, _ := (C.VkImageCreateFlags)(Flags), cgoAllocsUnknown
	cExternalHandleType, _ := (C.VkExternalMemoryHandleTypeFlagsNV)(ExternalHandleType), cgoAllocsUnknown
	cPExternalImageFormatProperties, _ := unpackArgSExternalImageFormatPropertiesNV(PExternalImageFormatProperties)
	__ret := C.vkGetPhysicalDeviceExternalImageFormatPropertiesNV(cPhysicalDevice, cFormat, c_type, cTiling, cUsage, cFlags, cExternalHandleType, cPExternalImageFormatProperties)
	packSExternalImageFormatPropertiesNV(PExternalImageFormatProperties, cPExternalImageFormatProperties)
	__v := (Result)(__ret)
	return __v
}

// CmdBeginConditionalRenderingEXT function as declared in vulkan/vulkan_core.h:6471
func CmdBeginConditionalRenderingEXT(CommandBuffer CommandBuffer, PConditionalRenderingBegin []ConditionalRenderingBeginInfoEXT) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPConditionalRenderingBegin, _ := unpackArgSConditionalRenderingBeginInfoEXT(PConditionalRenderingBegin)
	C.vkCmdBeginConditionalRenderingEXT(cCommandBuffer, cPConditionalRenderingBegin)
	packSConditionalRenderingBeginInfoEXT(PConditionalRenderingBegin, cPConditionalRenderingBegin)
}

// CmdEndConditionalRenderingEXT function as declared in vulkan/vulkan_core.h:6475
func CmdEndConditionalRenderingEXT(CommandBuffer CommandBuffer) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	C.vkCmdEndConditionalRenderingEXT(cCommandBuffer)
}

// CmdProcessCommandsNVX function as declared in vulkan/vulkan_core.h:6656
func CmdProcessCommandsNVX(CommandBuffer CommandBuffer, PProcessCommandsInfo []CmdProcessCommandsInfoNVX) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPProcessCommandsInfo, _ := unpackArgSCmdProcessCommandsInfoNVX(PProcessCommandsInfo)
	C.vkCmdProcessCommandsNVX(cCommandBuffer, cPProcessCommandsInfo)
	packSCmdProcessCommandsInfoNVX(PProcessCommandsInfo, cPProcessCommandsInfo)
}

// CmdReserveSpaceForCommandsNVX function as declared in vulkan/vulkan_core.h:6660
func CmdReserveSpaceForCommandsNVX(CommandBuffer CommandBuffer, PReserveSpaceInfo []CmdReserveSpaceForCommandsInfoNVX) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPReserveSpaceInfo, _ := unpackArgSCmdReserveSpaceForCommandsInfoNVX(PReserveSpaceInfo)
	C.vkCmdReserveSpaceForCommandsNVX(cCommandBuffer, cPReserveSpaceInfo)
	packSCmdReserveSpaceForCommandsInfoNVX(PReserveSpaceInfo, cPReserveSpaceInfo)
}

// CreateIndirectCommandsLayoutNVX function as declared in vulkan/vulkan_core.h:6664
func CreateIndirectCommandsLayoutNVX(Device Device, PCreateInfo []IndirectCommandsLayoutCreateInfoNVX, PAllocator []AllocationCallbacks, PIndirectCommandsLayout []IndirectCommandsLayoutNVX) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSIndirectCommandsLayoutCreateInfoNVX(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPIndirectCommandsLayout, _ := (*C.VkIndirectCommandsLayoutNVX)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PIndirectCommandsLayout)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateIndirectCommandsLayoutNVX(cDevice, cPCreateInfo, cPAllocator, cPIndirectCommandsLayout)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSIndirectCommandsLayoutCreateInfoNVX(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyIndirectCommandsLayoutNVX function as declared in vulkan/vulkan_core.h:6670
func DestroyIndirectCommandsLayoutNVX(Device Device, IndirectCommandsLayout IndirectCommandsLayoutNVX, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cIndirectCommandsLayout, _ := *(*C.VkIndirectCommandsLayoutNVX)(unsafe.Pointer(&IndirectCommandsLayout)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyIndirectCommandsLayoutNVX(cDevice, cIndirectCommandsLayout, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateObjectTableNVX function as declared in vulkan/vulkan_core.h:6675
func CreateObjectTableNVX(Device Device, PCreateInfo []ObjectTableCreateInfoNVX, PAllocator []AllocationCallbacks, PObjectTable []ObjectTableNVX) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSObjectTableCreateInfoNVX(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPObjectTable, _ := (*C.VkObjectTableNVX)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PObjectTable)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateObjectTableNVX(cDevice, cPCreateInfo, cPAllocator, cPObjectTable)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSObjectTableCreateInfoNVX(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyObjectTableNVX function as declared in vulkan/vulkan_core.h:6681
func DestroyObjectTableNVX(Device Device, ObjectTable ObjectTableNVX, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cObjectTable, _ := *(*C.VkObjectTableNVX)(unsafe.Pointer(&ObjectTable)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyObjectTableNVX(cDevice, cObjectTable, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// RegisterObjectsNVX function as declared in vulkan/vulkan_core.h:6686
func RegisterObjectsNVX(Device Device, ObjectTable ObjectTableNVX, ObjectCount uint32, PpObjectTableEntries [][]ObjectTableEntryNVX, PObjectIndices []uint32) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cObjectTable, _ := *(*C.VkObjectTableNVX)(unsafe.Pointer(&ObjectTable)), cgoAllocsUnknown
	cObjectCount, _ := (C.uint32_t)(ObjectCount), cgoAllocsUnknown
	cPpObjectTableEntries, _ := unpackArgSSObjectTableEntryNVX(PpObjectTableEntries)
	cPObjectIndices, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PObjectIndices)).Data)), cgoAllocsUnknown
	__ret := C.vkRegisterObjectsNVX(cDevice, cObjectTable, cObjectCount, cPpObjectTableEntries, cPObjectIndices)
	packSSObjectTableEntryNVX(PpObjectTableEntries, cPpObjectTableEntries)
	__v := (Result)(__ret)
	return __v
}

// UnregisterObjectsNVX function as declared in vulkan/vulkan_core.h:6693
func UnregisterObjectsNVX(Device Device, ObjectTable ObjectTableNVX, ObjectCount uint32, PObjectEntryTypes []ObjectEntryTypeNVX, PObjectIndices []uint32) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cObjectTable, _ := *(*C.VkObjectTableNVX)(unsafe.Pointer(&ObjectTable)), cgoAllocsUnknown
	cObjectCount, _ := (C.uint32_t)(ObjectCount), cgoAllocsUnknown
	cPObjectEntryTypes, _ := (*C.VkObjectEntryTypeNVX)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PObjectEntryTypes)).Data)), cgoAllocsUnknown
	cPObjectIndices, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PObjectIndices)).Data)), cgoAllocsUnknown
	__ret := C.vkUnregisterObjectsNVX(cDevice, cObjectTable, cObjectCount, cPObjectEntryTypes, cPObjectIndices)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceGeneratedCommandsPropertiesNVX function as declared in vulkan/vulkan_core.h:6700
func GetPhysicalDeviceGeneratedCommandsPropertiesNVX(PhysicalDevice PhysicalDevice, PFeatures []DeviceGeneratedCommandsFeaturesNVX, PLimits []DeviceGeneratedCommandsLimitsNVX) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cPFeatures, _ := unpackArgSDeviceGeneratedCommandsFeaturesNVX(PFeatures)
	cPLimits, _ := unpackArgSDeviceGeneratedCommandsLimitsNVX(PLimits)
	C.vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(cPhysicalDevice, cPFeatures, cPLimits)
	packSDeviceGeneratedCommandsLimitsNVX(PLimits, cPLimits)
	packSDeviceGeneratedCommandsFeaturesNVX(PFeatures, cPFeatures)
}

// CmdSetViewportWScalingNV function as declared in vulkan/vulkan_core.h:6727
func CmdSetViewportWScalingNV(CommandBuffer CommandBuffer, FirstViewport uint32, ViewportCount uint32, PViewportWScalings []ViewportWScalingNV) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cFirstViewport, _ := (C.uint32_t)(FirstViewport), cgoAllocsUnknown
	cViewportCount, _ := (C.uint32_t)(ViewportCount), cgoAllocsUnknown
	cPViewportWScalings, _ := unpackArgSViewportWScalingNV(PViewportWScalings)
	C.vkCmdSetViewportWScalingNV(cCommandBuffer, cFirstViewport, cViewportCount, cPViewportWScalings)
	packSViewportWScalingNV(PViewportWScalings, cPViewportWScalings)
}

// ReleaseDisplayEXT function as declared in vulkan/vulkan_core.h:6741
func ReleaseDisplayEXT(PhysicalDevice PhysicalDevice, Display DisplayKHR) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cDisplay, _ := *(*C.VkDisplayKHR)(unsafe.Pointer(&Display)), cgoAllocsUnknown
	__ret := C.vkReleaseDisplayEXT(cPhysicalDevice, cDisplay)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceCapabilities2EXT function as declared in vulkan/vulkan_core.h:6778
func GetPhysicalDeviceSurfaceCapabilities2EXT(PhysicalDevice PhysicalDevice, Surface SurfaceKHR, PSurfaceCapabilities []SurfaceCapabilities2EXT) Result {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cSurface, _ := *(*C.VkSurfaceKHR)(unsafe.Pointer(&Surface)), cgoAllocsUnknown
	cPSurfaceCapabilities, _ := unpackArgSSurfaceCapabilities2EXT(PSurfaceCapabilities)
	__ret := C.vkGetPhysicalDeviceSurfaceCapabilities2EXT(cPhysicalDevice, cSurface, cPSurfaceCapabilities)
	packSSurfaceCapabilities2EXT(PSurfaceCapabilities, cPSurfaceCapabilities)
	__v := (Result)(__ret)
	return __v
}

// DisplayPowerControlEXT function as declared in vulkan/vulkan_core.h:6846
func DisplayPowerControlEXT(Device Device, Display DisplayKHR, PDisplayPowerInfo []DisplayPowerInfoEXT) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDisplay, _ := *(*C.VkDisplayKHR)(unsafe.Pointer(&Display)), cgoAllocsUnknown
	cPDisplayPowerInfo, _ := unpackArgSDisplayPowerInfoEXT(PDisplayPowerInfo)
	__ret := C.vkDisplayPowerControlEXT(cDevice, cDisplay, cPDisplayPowerInfo)
	packSDisplayPowerInfoEXT(PDisplayPowerInfo, cPDisplayPowerInfo)
	__v := (Result)(__ret)
	return __v
}

// RegisterDeviceEventEXT function as declared in vulkan/vulkan_core.h:6851
func RegisterDeviceEventEXT(Device Device, PDeviceEventInfo []DeviceEventInfoEXT, PAllocator []AllocationCallbacks, PFence []Fence) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPDeviceEventInfo, _ := unpackArgSDeviceEventInfoEXT(PDeviceEventInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPFence, _ := (*C.VkFence)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PFence)).Data)), cgoAllocsUnknown
	__ret := C.vkRegisterDeviceEventEXT(cDevice, cPDeviceEventInfo, cPAllocator, cPFence)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDeviceEventInfoEXT(PDeviceEventInfo, cPDeviceEventInfo)
	__v := (Result)(__ret)
	return __v
}

// RegisterDisplayEventEXT function as declared in vulkan/vulkan_core.h:6857
func RegisterDisplayEventEXT(Device Device, Display DisplayKHR, PDisplayEventInfo []DisplayEventInfoEXT, PAllocator []AllocationCallbacks, PFence []Fence) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDisplay, _ := *(*C.VkDisplayKHR)(unsafe.Pointer(&Display)), cgoAllocsUnknown
	cPDisplayEventInfo, _ := unpackArgSDisplayEventInfoEXT(PDisplayEventInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPFence, _ := (*C.VkFence)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PFence)).Data)), cgoAllocsUnknown
	__ret := C.vkRegisterDisplayEventEXT(cDevice, cDisplay, cPDisplayEventInfo, cPAllocator, cPFence)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDisplayEventInfoEXT(PDisplayEventInfo, cPDisplayEventInfo)
	__v := (Result)(__ret)
	return __v
}

// GetSwapchainCounterEXT function as declared in vulkan/vulkan_core.h:6864
func GetSwapchainCounterEXT(Device Device, Swapchain SwapchainKHR, Counter SurfaceCounterFlagBitsEXT, PCounterValue []uint64) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSwapchain, _ := *(*C.VkSwapchainKHR)(unsafe.Pointer(&Swapchain)), cgoAllocsUnknown
	cCounter, _ := (C.VkSurfaceCounterFlagBitsEXT)(Counter), cgoAllocsUnknown
	cPCounterValue, _ := (*C.uint64_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PCounterValue)).Data)), cgoAllocsUnknown
	__ret := C.vkGetSwapchainCounterEXT(cDevice, cSwapchain, cCounter, cPCounterValue)
	__v := (Result)(__ret)
	return __v
}

// GetRefreshCycleDurationGOOGLE function as declared in vulkan/vulkan_core.h:6904
func GetRefreshCycleDurationGOOGLE(Device Device, Swapchain SwapchainKHR, PDisplayTimingProperties []RefreshCycleDurationGOOGLE) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSwapchain, _ := *(*C.VkSwapchainKHR)(unsafe.Pointer(&Swapchain)), cgoAllocsUnknown
	cPDisplayTimingProperties, _ := unpackArgSRefreshCycleDurationGOOGLE(PDisplayTimingProperties)
	__ret := C.vkGetRefreshCycleDurationGOOGLE(cDevice, cSwapchain, cPDisplayTimingProperties)
	packSRefreshCycleDurationGOOGLE(PDisplayTimingProperties, cPDisplayTimingProperties)
	__v := (Result)(__ret)
	return __v
}

// GetPastPresentationTimingGOOGLE function as declared in vulkan/vulkan_core.h:6909
func GetPastPresentationTimingGOOGLE(Device Device, Swapchain SwapchainKHR, PPresentationTimingCount []uint32, PPresentationTimings []PastPresentationTimingGOOGLE) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSwapchain, _ := *(*C.VkSwapchainKHR)(unsafe.Pointer(&Swapchain)), cgoAllocsUnknown
	cPPresentationTimingCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPresentationTimingCount)).Data)), cgoAllocsUnknown
	cPPresentationTimings, _ := unpackArgSPastPresentationTimingGOOGLE(PPresentationTimings)
	__ret := C.vkGetPastPresentationTimingGOOGLE(cDevice, cSwapchain, cPPresentationTimingCount, cPPresentationTimings)
	packSPastPresentationTimingGOOGLE(PPresentationTimings, cPPresentationTimings)
	__v := (Result)(__ret)
	return __v
}

// CmdSetDiscardRectangleEXT function as declared in vulkan/vulkan_core.h:7017
func CmdSetDiscardRectangleEXT(CommandBuffer CommandBuffer, FirstDiscardRectangle uint32, DiscardRectangleCount uint32, PDiscardRectangles []Rect2D) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cFirstDiscardRectangle, _ := (C.uint32_t)(FirstDiscardRectangle), cgoAllocsUnknown
	cDiscardRectangleCount, _ := (C.uint32_t)(DiscardRectangleCount), cgoAllocsUnknown
	cPDiscardRectangles, _ := unpackArgSRect2D(PDiscardRectangles)
	C.vkCmdSetDiscardRectangleEXT(cCommandBuffer, cFirstDiscardRectangle, cDiscardRectangleCount, cPDiscardRectangles)
	packSRect2D(PDiscardRectangles, cPDiscardRectangles)
}

// SetHdrMetadataEXT function as declared in vulkan/vulkan_core.h:7096
func SetHdrMetadataEXT(Device Device, SwapchainCount uint32, PSwapchains []SwapchainKHR, PMetadata []HdrMetadataEXT) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSwapchainCount, _ := (C.uint32_t)(SwapchainCount), cgoAllocsUnknown
	cPSwapchains, _ := (*C.VkSwapchainKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSwapchains)).Data)), cgoAllocsUnknown
	cPMetadata, _ := unpackArgSHdrMetadataEXT(PMetadata)
	C.vkSetHdrMetadataEXT(cDevice, cSwapchainCount, cPSwapchains, cPMetadata)
	packSHdrMetadataEXT(PMetadata, cPMetadata)
}

// SetDebugUtilsObjectNameEXT function as declared in vulkan/vulkan_core.h:7210
func SetDebugUtilsObjectNameEXT(Device Device, PNameInfo []DebugUtilsObjectNameInfoEXT) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPNameInfo, _ := unpackArgSDebugUtilsObjectNameInfoEXT(PNameInfo)
	__ret := C.vkSetDebugUtilsObjectNameEXT(cDevice, cPNameInfo)
	packSDebugUtilsObjectNameInfoEXT(PNameInfo, cPNameInfo)
	__v := (Result)(__ret)
	return __v
}

// SetDebugUtilsObjectTagEXT function as declared in vulkan/vulkan_core.h:7214
func SetDebugUtilsObjectTagEXT(Device Device, PTagInfo []DebugUtilsObjectTagInfoEXT) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPTagInfo, _ := unpackArgSDebugUtilsObjectTagInfoEXT(PTagInfo)
	__ret := C.vkSetDebugUtilsObjectTagEXT(cDevice, cPTagInfo)
	packSDebugUtilsObjectTagInfoEXT(PTagInfo, cPTagInfo)
	__v := (Result)(__ret)
	return __v
}

// QueueBeginDebugUtilsLabelEXT function as declared in vulkan/vulkan_core.h:7218
func QueueBeginDebugUtilsLabelEXT(Queue Queue, PLabelInfo []DebugUtilsLabelEXT) {
	cQueue, _ := *(*C.VkQueue)(unsafe.Pointer(&Queue)), cgoAllocsUnknown
	cPLabelInfo, _ := unpackArgSDebugUtilsLabelEXT(PLabelInfo)
	C.vkQueueBeginDebugUtilsLabelEXT(cQueue, cPLabelInfo)
	packSDebugUtilsLabelEXT(PLabelInfo, cPLabelInfo)
}

// QueueEndDebugUtilsLabelEXT function as declared in vulkan/vulkan_core.h:7222
func QueueEndDebugUtilsLabelEXT(Queue Queue) {
	cQueue, _ := *(*C.VkQueue)(unsafe.Pointer(&Queue)), cgoAllocsUnknown
	C.vkQueueEndDebugUtilsLabelEXT(cQueue)
}

// QueueInsertDebugUtilsLabelEXT function as declared in vulkan/vulkan_core.h:7225
func QueueInsertDebugUtilsLabelEXT(Queue Queue, PLabelInfo []DebugUtilsLabelEXT) {
	cQueue, _ := *(*C.VkQueue)(unsafe.Pointer(&Queue)), cgoAllocsUnknown
	cPLabelInfo, _ := unpackArgSDebugUtilsLabelEXT(PLabelInfo)
	C.vkQueueInsertDebugUtilsLabelEXT(cQueue, cPLabelInfo)
	packSDebugUtilsLabelEXT(PLabelInfo, cPLabelInfo)
}

// CmdBeginDebugUtilsLabelEXT function as declared in vulkan/vulkan_core.h:7229
func CmdBeginDebugUtilsLabelEXT(CommandBuffer CommandBuffer, PLabelInfo []DebugUtilsLabelEXT) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPLabelInfo, _ := unpackArgSDebugUtilsLabelEXT(PLabelInfo)
	C.vkCmdBeginDebugUtilsLabelEXT(cCommandBuffer, cPLabelInfo)
	packSDebugUtilsLabelEXT(PLabelInfo, cPLabelInfo)
}

// CmdEndDebugUtilsLabelEXT function as declared in vulkan/vulkan_core.h:7233
func CmdEndDebugUtilsLabelEXT(CommandBuffer CommandBuffer) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	C.vkCmdEndDebugUtilsLabelEXT(cCommandBuffer)
}

// CmdInsertDebugUtilsLabelEXT function as declared in vulkan/vulkan_core.h:7236
func CmdInsertDebugUtilsLabelEXT(CommandBuffer CommandBuffer, PLabelInfo []DebugUtilsLabelEXT) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPLabelInfo, _ := unpackArgSDebugUtilsLabelEXT(PLabelInfo)
	C.vkCmdInsertDebugUtilsLabelEXT(cCommandBuffer, cPLabelInfo)
	packSDebugUtilsLabelEXT(PLabelInfo, cPLabelInfo)
}

// CreateDebugUtilsMessengerEXT function as declared in vulkan/vulkan_core.h:7240
func CreateDebugUtilsMessengerEXT(Instance Instance, PCreateInfo []DebugUtilsMessengerCreateInfoEXT, PAllocator []AllocationCallbacks, PMessenger []DebugUtilsMessengerEXT) Result {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDebugUtilsMessengerCreateInfoEXT(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPMessenger, _ := (*C.VkDebugUtilsMessengerEXT)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PMessenger)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateDebugUtilsMessengerEXT(cInstance, cPCreateInfo, cPAllocator, cPMessenger)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDebugUtilsMessengerCreateInfoEXT(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDebugUtilsMessengerEXT function as declared in vulkan/vulkan_core.h:7246
func DestroyDebugUtilsMessengerEXT(Instance Instance, Messenger DebugUtilsMessengerEXT, PAllocator []AllocationCallbacks) {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cMessenger, _ := *(*C.VkDebugUtilsMessengerEXT)(unsafe.Pointer(&Messenger)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDebugUtilsMessengerEXT(cInstance, cMessenger, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// SubmitDebugUtilsMessageEXT function as declared in vulkan/vulkan_core.h:7251
func SubmitDebugUtilsMessageEXT(Instance Instance, MessageSeverity DebugUtilsMessageSeverityFlagBitsEXT, MessageTypes DebugUtilsMessageTypeFlagsEXT, PCallbackData []DebugUtilsMessengerCallbackDataEXT) {
	cInstance, _ := *(*C.VkInstance)(unsafe.Pointer(&Instance)), cgoAllocsUnknown
	cMessageSeverity, _ := (C.VkDebugUtilsMessageSeverityFlagBitsEXT)(MessageSeverity), cgoAllocsUnknown
	cMessageTypes, _ := (C.VkDebugUtilsMessageTypeFlagsEXT)(MessageTypes), cgoAllocsUnknown
	cPCallbackData, _ := unpackArgSDebugUtilsMessengerCallbackDataEXT(PCallbackData)
	C.vkSubmitDebugUtilsMessageEXT(cInstance, cMessageSeverity, cMessageTypes, cPCallbackData)
	packSDebugUtilsMessengerCallbackDataEXT(PCallbackData, cPCallbackData)
}

// CmdSetSampleLocationsEXT function as declared in vulkan/vulkan_core.h:7373
func CmdSetSampleLocationsEXT(CommandBuffer CommandBuffer, PSampleLocationsInfo []SampleLocationsInfoEXT) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPSampleLocationsInfo, _ := unpackArgSSampleLocationsInfoEXT(PSampleLocationsInfo)
	C.vkCmdSetSampleLocationsEXT(cCommandBuffer, cPSampleLocationsInfo)
	packSSampleLocationsInfoEXT(PSampleLocationsInfo, cPSampleLocationsInfo)
}

// GetPhysicalDeviceMultisamplePropertiesEXT function as declared in vulkan/vulkan_core.h:7377
func GetPhysicalDeviceMultisamplePropertiesEXT(PhysicalDevice PhysicalDevice, Samples SampleCountFlagBits, PMultisampleProperties []MultisamplePropertiesEXT) {
	cPhysicalDevice, _ := *(*C.VkPhysicalDevice)(unsafe.Pointer(&PhysicalDevice)), cgoAllocsUnknown
	cSamples, _ := (C.VkSampleCountFlagBits)(Samples), cgoAllocsUnknown
	cPMultisampleProperties, _ := unpackArgSMultisamplePropertiesEXT(PMultisampleProperties)
	C.vkGetPhysicalDeviceMultisamplePropertiesEXT(cPhysicalDevice, cSamples, cPMultisampleProperties)
	packSMultisamplePropertiesEXT(PMultisampleProperties, cPMultisampleProperties)
}

// CreateValidationCacheEXT function as declared in vulkan/vulkan_core.h:7520
func CreateValidationCacheEXT(Device Device, PCreateInfo []ValidationCacheCreateInfoEXT, PAllocator []AllocationCallbacks, PValidationCache []ValidationCacheEXT) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSValidationCacheCreateInfoEXT(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPValidationCache, _ := (*C.VkValidationCacheEXT)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PValidationCache)).Data)), cgoAllocsUnknown
	__ret := C.vkCreateValidationCacheEXT(cDevice, cPCreateInfo, cPAllocator, cPValidationCache)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSValidationCacheCreateInfoEXT(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyValidationCacheEXT function as declared in vulkan/vulkan_core.h:7526
func DestroyValidationCacheEXT(Device Device, ValidationCache ValidationCacheEXT, PAllocator []AllocationCallbacks) {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cValidationCache, _ := *(*C.VkValidationCacheEXT)(unsafe.Pointer(&ValidationCache)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyValidationCacheEXT(cDevice, cValidationCache, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// MergeValidationCachesEXT function as declared in vulkan/vulkan_core.h:7531
func MergeValidationCachesEXT(Device Device, DstCache ValidationCacheEXT, SrcCacheCount uint32, PSrcCaches []ValidationCacheEXT) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDstCache, _ := *(*C.VkValidationCacheEXT)(unsafe.Pointer(&DstCache)), cgoAllocsUnknown
	cSrcCacheCount, _ := (C.uint32_t)(SrcCacheCount), cgoAllocsUnknown
	cPSrcCaches, _ := (*C.VkValidationCacheEXT)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSrcCaches)).Data)), cgoAllocsUnknown
	__ret := C.vkMergeValidationCachesEXT(cDevice, cDstCache, cSrcCacheCount, cPSrcCaches)
	__v := (Result)(__ret)
	return __v
}

// GetValidationCacheDataEXT function as declared in vulkan/vulkan_core.h:7537
func GetValidationCacheDataEXT(Device Device, ValidationCache ValidationCacheEXT, PDataSize []uint, PData unsafe.Pointer) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cValidationCache, _ := *(*C.VkValidationCacheEXT)(unsafe.Pointer(&ValidationCache)), cgoAllocsUnknown
	cPDataSize, _ := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDataSize)).Data)), cgoAllocsUnknown
	cPData, _ := PData, cgoAllocsUnknown
	__ret := C.vkGetValidationCacheDataEXT(cDevice, cValidationCache, cPDataSize, cPData)
	__v := (Result)(__ret)
	return __v
}

// GetMemoryHostPointerPropertiesEXT function as declared in vulkan/vulkan_core.h:7689
func GetMemoryHostPointerPropertiesEXT(Device Device, HandleType ExternalMemoryHandleTypeFlagBits, PHostPointer unsafe.Pointer, PMemoryHostPointerProperties []MemoryHostPointerPropertiesEXT) Result {
	cDevice, _ := *(*C.VkDevice)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cHandleType, _ := (C.VkExternalMemoryHandleTypeFlagBits)(HandleType), cgoAllocsUnknown
	cPHostPointer, _ := PHostPointer, cgoAllocsUnknown
	cPMemoryHostPointerProperties, _ := unpackArgSMemoryHostPointerPropertiesEXT(PMemoryHostPointerProperties)
	__ret := C.vkGetMemoryHostPointerPropertiesEXT(cDevice, cHandleType, cPHostPointer, cPMemoryHostPointerProperties)
	packSMemoryHostPointerPropertiesEXT(PMemoryHostPointerProperties, cPMemoryHostPointerProperties)
	__v := (Result)(__ret)
	return __v
}

// CmdWriteBufferMarkerAMD function as declared in vulkan/vulkan_core.h:7703
func CmdWriteBufferMarkerAMD(CommandBuffer CommandBuffer, PipelineStage PipelineStageFlagBits, DstBuffer Buffer, DstOffset DeviceSize, Marker uint32) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPipelineStage, _ := (C.VkPipelineStageFlagBits)(PipelineStage), cgoAllocsUnknown
	cDstBuffer, _ := *(*C.VkBuffer)(unsafe.Pointer(&DstBuffer)), cgoAllocsUnknown
	cDstOffset, _ := (C.VkDeviceSize)(DstOffset), cgoAllocsUnknown
	cMarker, _ := (C.uint32_t)(Marker), cgoAllocsUnknown
	C.vkCmdWriteBufferMarkerAMD(cCommandBuffer, cPipelineStage, cDstBuffer, cDstOffset, cMarker)
}

// CmdSetCheckpointNV function as declared in vulkan/vulkan_core.h:7787
func CmdSetCheckpointNV(CommandBuffer CommandBuffer, PCheckpointMarker unsafe.Pointer) {
	cCommandBuffer, _ := *(*C.VkCommandBuffer)(unsafe.Pointer(&CommandBuffer)), cgoAllocsUnknown
	cPCheckpointMarker, _ := PCheckpointMarker, cgoAllocsUnknown
	C.vkCmdSetCheckpointNV(cCommandBuffer, cPCheckpointMarker)
}

// GetQueueCheckpointDataNV function as declared in vulkan/vulkan_core.h:7791
func GetQueueCheckpointDataNV(Queue Queue, PCheckpointDataCount []uint32, PCheckpointData []CheckpointDataNV) {
	cQueue, _ := *(*C.VkQueue)(unsafe.Pointer(&Queue)), cgoAllocsUnknown
	cPCheckpointDataCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PCheckpointDataCount)).Data)), cgoAllocsUnknown
	cPCheckpointData, _ := unpackArgSCheckpointDataNV(PCheckpointData)
	C.vkGetQueueCheckpointDataNV(cQueue, cPCheckpointDataCount, cPCheckpointData)
	packSCheckpointDataNV(PCheckpointData, cPCheckpointData)
}
